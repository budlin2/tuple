{"version":3,"file":"DropZoneCenter.640d5182.js","sources":["../../src/components/Dropzone/Center/DropZoneCenter.tsx"],"sourcesContent":["import {\n    CSSProperties,\n    DragEvent,\n    ReactElement,\n    useState\n} from 'react';\n\nimport _classes from './center.dropzone.module.css';\n\n\nexport interface Props {\n    onDragOverCB?       : ((e: DragEvent<Element>) => void) | null,\n    onDragLeaveCB?      : ((e: DragEvent<Element>) => void) | null,\n    onDropCB?           : ((e: DragEvent<Element>) => void) | null,\n    validateDraggable?  : ((e: DragEvent<Element>) => boolean) | null,\n    dropZoneActive?     : boolean,  // parent component may want to control when dropzone is active\n    className?          : string | null,\n    style?              : CSSProperties | null,\n    children?           : ReactElement,\n}\n\n\nconst DropZoneCenter = ({\n    onDragOverCB=null,\n    onDragLeaveCB=null,\n    onDropCB=null,\n    validateDraggable=null,\n    dropZoneActive=true,  // default behavior is to always have dropzone available. Parent may override this\n    className=null,\n    style=null,\n    children,\n}: Props) => {\n    const [dropZoneVisible, setDropZoneVisible] = useState(false);\n\n    const dropZoneDisplayClass = `${_classes.dropZoneDisplay} ${className}`;\n\n\n    // DropZone Event Handlers\n    const onDragOverHandler = (e: DragEvent<Element>) => {\n        // e.stopPropagation();\n        e.preventDefault();\n\n        setDropZoneVisible(true);\n\n        onDragOverCB && onDragOverCB(e);\n    };\n\n    const onDragLeaveHandler = (e: DragEvent<Element>) => {\n        setDropZoneVisible(false);\n\n        onDragLeaveCB && onDragLeaveCB(e);\n    };\n\n    const onDropHandler = (e: DragEvent<Element>) => {\n        setDropZoneVisible(false);\n\n        if (validateDraggable && !validateDraggable(e))\n            return;\n\n        onDropCB && onDropCB(e);\n    };\n\n    return (\n        <div className={_classes.root}>\n            { dropZoneActive && (\n                <div className  = { _classes.dropZone }\n                    style       = { style || {} }\n                    onDragOver  = { onDragOverHandler }\n                    onDragLeave = { onDragLeaveHandler }\n                    onDrop      = { onDropHandler }\n                />\n            )}\n\n            { dropZoneVisible && <div className={dropZoneDisplayClass} /> }\n            \n            { children }\n        </div>\n    );\n}\n\n\nexport default DropZoneCenter;"],"names":["DropZoneCenter","onDragOverCB","onDragLeaveCB","onDropCB","validateDraggable","dropZoneActive","className","style","children","dropZoneVisible","setDropZoneVisible","useState","dropZoneDisplayClass","_classes","onDragOverHandler","e","onDragLeaveHandler","onDropHandler","_jsxs","root","dropZone","DropZoneCenter$1"],"mappings":"sNAsBA,MAAAA,EAAA,CAAA,CAAwB,aAAAC,EAAA,KACP,cAAAC,EAAA,KACC,SAAAC,EAAA,KACL,kBAAAC,EAAA,KACS,eAAAC,EAAA,GACH,UAAAC,EAAA,KACL,MAAAC,EAAA,KACJ,SAAAC,CAEH,IAAA,CACH,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EAEAC,EAAA,GAAAC,EAAA,mBAAAP,IAIAQ,EAAA,GAAA,CAEIC,EAAAA,eAAAA,EAEAL,EAAAA,EAAAA,EAEAT,GAAAA,EAAAA,CAAAA,CAA8B,EAGlCe,EAAA,GAAA,CACIN,EAAAA,EAAAA,EAEAR,GAAAA,EAAAA,CAAAA,CAAgC,EAGpCe,EAAA,GAAA,CACIP,EAAAA,EAAAA,EAEA,EAAAN,GAAA,CAAAA,EAAA,CAAA,IAGAD,GAAAA,EAAAA,CAAAA,CAAsB,EAG1B,OAAAe,EAAA,MAAA,CACI,UAAAL,EAAA,KAAyBM,SAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CAEjB,UAAAN,EAAA,SAA6BO,MAAAA,GAAAA,CAAAA,EACC,WAAAN,EACVA,YAAAA,EACAE,OAAAA,CACAC,CAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CAIH,UAAAL,CAAgBA,CAAAA,EAAAA,CAAAA,CAE3B,CAAA,CAGtB,EAGA,IAAAS,EAAArB"}