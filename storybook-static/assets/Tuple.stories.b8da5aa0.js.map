{"version":3,"file":"Tuple.stories.b8da5aa0.js","sources":["../../src/utils/index.ts","../../node_modules/usehooks-ts/dist/esm/useCopyToClipboard/useCopyToClipboard.js","../../node_modules/usehooks-ts/dist/esm/useEventCallback/useEventCallback.js","../../node_modules/usehooks-ts/dist/esm/useEventListener/useEventListener.js","../../node_modules/usehooks-ts/dist/esm/useFetch/useFetch.js","../../node_modules/usehooks-ts/dist/esm/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js","../../node_modules/usehooks-ts/dist/esm/useLocalStorage/useLocalStorage.js","../../src/components/Draggable/index.ts","../../src/components/Tuple/state/browser-actions.ts","../../src/components/SplitPane/SplitPaneTypes.ts","../../src/components/Tuple/TupleTypes.ts","../../src/components/Tuple/state/dispatchers.ts","../../src/components/Tuple/Tree/Leaf.tsx","../../src/components/Tuple/Tree/Branch.tsx","../../src/components/Tuple/Tree/Rootlet.tsx","../../src/components/Tuple/Tree/Root.tsx","../../src/components/Tuple/Tree/TreeTypes.ts","../../src/components/Tuple/Tree/Trashcan.tsx","../../src/components/Tuple/Tree/Tree.tsx","../../src/components/Tuple/Viewport/View/TabBar/Tab.tsx","../../src/components/Tuple/Viewport/View/TabBar/TabBar.tsx","../../src/components/Tuple/Viewport/View/View.tsx","../../src/components/Tuple/Viewport/Port.tsx","../../src/components/Tuple/Viewport/View/DefaultView.tsx","../../src/components/Tuple/Viewport/Viewport.tsx","../../src/components/Tuple/TupleInner.tsx","../../src/components/Tuple/state/actions.ts","../../src/components/Tuple/state/index.ts","../../src/components/Tuple/Viewport/ViewportTypes.ts","../../src/components/Tuple/index.tsx","../../src/components/Page/index.tsx"],"sourcesContent":["// https://stackoverflow.com/questions/3231459/how-can-i-create-unique-ids-with-javascript\nexport const getUniqueId = () => {\n    return getRandomWord() + Date.now().toString(36) + Math.floor(\n        Math.pow(10, 12) + Math.random() * 9 * Math.pow(10, 12)\n    ).toString(36);\n}\n\n\nconst getRandomWord = () => {\n    const words = [\"apple\",\"zebra\",\"lion\",\"pancho\",\"lioness\",\"tough\",\"weak\",\"pretty\",\"monkey\",\"monster\",\"imp\",\"sloth\",\"dragon\",\"house\",\"door\",\"window\",\"air\",\"park\",\"tree\",\"chipmunk\",\"monk\",\"priestess\",\"elephant\"];\n\n    const max = words.length - 1;\n    const min = 0;\n    const index = Math.floor(Math.random() * (max - min + 1) + min);\n  \n    return words[index];\n};\n\n\nexport const isObject = (obj: any) => typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { useState } from 'react';\nfunction useCopyToClipboard() {\n    const [copiedText, setCopiedText] = useState(null);\n    const copy = (text) => __awaiter(this, void 0, void 0, function* () {\n        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.clipboard)) {\n            console.warn('Clipboard not supported');\n            return false;\n        }\n        try {\n            yield navigator.clipboard.writeText(text);\n            setCopiedText(text);\n            return true;\n        }\n        catch (error) {\n            console.warn('Copy failed', error);\n            setCopiedText(null);\n            return false;\n        }\n    });\n    return [copiedText, copy];\n}\nexport default useCopyToClipboard;\n","import { useCallback, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from '..';\nexport default function useEventCallback(fn) {\n    const ref = useRef(() => {\n        throw new Error('Cannot call an event handler while rendering.');\n    });\n    useIsomorphicLayoutEffect(() => {\n        ref.current = fn;\n    }, [fn]);\n    return useCallback((...args) => ref.current(...args), [ref]);\n}\n","import { useEffect, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from '..';\nfunction useEventListener(eventName, handler, element, options) {\n    const savedHandler = useRef(handler);\n    useIsomorphicLayoutEffect(() => {\n        savedHandler.current = handler;\n    }, [handler]);\n    useEffect(() => {\n        var _a;\n        const targetElement = (_a = element === null || element === void 0 ? void 0 : element.current) !== null && _a !== void 0 ? _a : window;\n        if (!(targetElement && targetElement.addEventListener))\n            return;\n        const listener = event => savedHandler.current(event);\n        targetElement.addEventListener(eventName, listener, options);\n        return () => {\n            targetElement.removeEventListener(eventName, listener, options);\n        };\n    }, [eventName, element, options]);\n}\nexport default useEventListener;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { useEffect, useReducer, useRef } from 'react';\nfunction useFetch(url, options) {\n    const cache = useRef({});\n    const cancelRequest = useRef(false);\n    const initialState = {\n        error: undefined,\n        data: undefined,\n    };\n    const fetchReducer = (state, action) => {\n        switch (action.type) {\n            case 'loading':\n                return Object.assign({}, initialState);\n            case 'fetched':\n                return Object.assign(Object.assign({}, initialState), { data: action.payload });\n            case 'error':\n                return Object.assign(Object.assign({}, initialState), { error: action.payload });\n            default:\n                return state;\n        }\n    };\n    const [state, dispatch] = useReducer(fetchReducer, initialState);\n    useEffect(() => {\n        if (!url)\n            return;\n        cancelRequest.current = false;\n        const fetchData = () => __awaiter(this, void 0, void 0, function* () {\n            dispatch({ type: 'loading' });\n            if (cache.current[url]) {\n                dispatch({ type: 'fetched', payload: cache.current[url] });\n                return;\n            }\n            try {\n                const response = yield fetch(url, options);\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                const data = (yield response.json());\n                cache.current[url] = data;\n                if (cancelRequest.current)\n                    return;\n                dispatch({ type: 'fetched', payload: data });\n            }\n            catch (error) {\n                if (cancelRequest.current)\n                    return;\n                dispatch({ type: 'error', payload: error });\n            }\n        });\n        void fetchData();\n        return () => {\n            cancelRequest.current = true;\n        };\n    }, [url]);\n    return state;\n}\nexport default useFetch;\n","import { useEffect, useLayoutEffect } from 'react';\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useCallback, useEffect, useState, } from 'react';\nimport { useEventCallback, useEventListener } from '..';\nfunction useLocalStorage(key, initialValue) {\n    const readValue = useCallback(() => {\n        if (typeof window === 'undefined') {\n            return initialValue;\n        }\n        try {\n            const item = window.localStorage.getItem(key);\n            return item ? parseJSON(item) : initialValue;\n        }\n        catch (error) {\n            console.warn(`Error reading localStorage key “${key}”:`, error);\n            return initialValue;\n        }\n    }, [initialValue, key]);\n    const [storedValue, setStoredValue] = useState(readValue);\n    const setValue = useEventCallback(value => {\n        if (typeof window === 'undefined') {\n            console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);\n        }\n        try {\n            const newValue = value instanceof Function ? value(storedValue) : value;\n            window.localStorage.setItem(key, JSON.stringify(newValue));\n            setStoredValue(newValue);\n            window.dispatchEvent(new Event('local-storage'));\n        }\n        catch (error) {\n            console.warn(`Error setting localStorage key “${key}”:`, error);\n        }\n    });\n    useEffect(() => {\n        setStoredValue(readValue());\n    }, []);\n    const handleStorageChange = useCallback((event) => {\n        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {\n            return;\n        }\n        setStoredValue(readValue());\n    }, [key, readValue]);\n    useEventListener('storage', handleStorageChange);\n    useEventListener('local-storage', handleStorageChange);\n    return [storedValue, setValue];\n}\nexport default useLocalStorage;\nfunction parseJSON(value) {\n    try {\n        return value === 'undefined' ? undefined : JSON.parse(value !== null && value !== void 0 ? value : '');\n    }\n    catch (_a) {\n        console.log('parsing error on', { value });\n        return undefined;\n    }\n}\n","import { CSSProperties, DragEvent } from 'react';\n\nimport _classes from './draggable.module.css';\n\n\nconst DRAG_ID = 'DRAG_QUEEN_STORY_HOUR_LMAOOOOO';\n\n\n// Returns id of element, so calling component can remove it later\nexport const setCustomDragImage = (\n    e: DragEvent<Element>,\n    text: string = 'Dragging',\n    className: string = '',\n    style: CSSProperties | null = null,\n) => {\n    const elem = document.createElement(\"div\");\n    \n    elem.id = DRAG_ID;\n    elem.innerText = text;\n    elem.className = `${_classes.draggable} ${className}`;\n\n    if (style) {  // hacky\n        for (const prop in style) {\n            elem.style[prop as any] = (style as any)[prop];\n        }\n    }\n    \n    document.body.appendChild(elem);\n    e.dataTransfer.setDragImage(elem, 40, 12);\n}\n\n\nexport const cleanupDraggable = () => {\n    const draggable = document.getElementById(DRAG_ID);\n    if (draggable?.parentNode)\n        draggable.parentNode.removeChild(draggable);\n}\n\n\nexport const validateDraggable = (e: DragEvent<Element>): boolean => {\n    const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n    return !!dragPageId;\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// Checks if coordinates are outside window. Use e.clientX and e.clientY for pointer events\nexport const outsideWindow = (x: number, y: number) => x < 0 || x > window.outerWidth || y < 0 || y > window.outerHeight;\n","import { getUniqueId } from \"../../../utils\";\nimport { ID, StoragePort, StoragePorts } from \"../TupleTypes\";\nimport { PortsT, PortT, ViewT } from \"../Viewport/ViewportTypes\";\n\n\nexport const STORAGE_ID = 'ports';\nconst DRAGGED_TO_DIFF_VP_ID = 'dragged_to_tuple';\nconst VIEWPORT_QUERY_ID = 'p';\nexport const DRAGGING_ID = 'dragging';\n\n\n//---------------------------------------------------------------------------------------------------------------------\n// Storage Actions\n//---------------------------------------------------------------------------------------------------------------------\n\n// TODO: Generalize for both local and session storage\n//---------------------------------------------------------------------------------------------------------------------\nexport const get_storage_ports = (): StoragePorts | null => {\n    const storagePorts = localStorage.getItem(STORAGE_ID);\n    if (storagePorts)\n        return JSON.parse(storagePorts) as StoragePorts;\n\n    return null\n};\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const get_storage_port = (id: ID): StoragePort | null => {\n    const storage = JSON.parse(localStorage.getItem(STORAGE_ID)) as StoragePort;\n    if (storage && storage[id])\n        return storage[id];\n\n    return null\n};\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const set_storage_port = (portId: ID, ports: PortsT, rootId: ID, open: boolean) => {\n    const storagePorts: StoragePorts = get_storage_ports() || {};\n    storagePorts[portId] = {\n        open,\n        ports,\n        rootId,\n    } as StoragePort;\n\n    localStorage.setItem(STORAGE_ID, JSON.stringify(storagePorts));\n}\n\nexport const remove_storage_port_key = (portId: ID) => {\n    const storagePorts: StoragePorts = get_storage_ports();\n    if (storagePorts) {\n        delete storagePorts[portId];\n    }\n\n    localStorage.setItem(STORAGE_ID, JSON.stringify(storagePorts));\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// Returns true if successfully renamed; false otherwise\nexport const rename_storage_port_key = (oldKey: ID, newKey: ID): boolean => {\n    const storagePorts: StoragePorts = get_storage_ports();\n    if (storagePorts[oldKey]) {\n        const { ports, rootId, open }: StoragePort = storagePorts[oldKey];\n\n        if (open) {\n            alert('Please close this viewport before renaming');\n            return false;\n        }\n\n        if (ports) {\n            set_storage_port(newKey, ports, rootId, false);\n            remove_storage_port_key(oldKey);\n            return true;\n        }\n    }\n\n    return false;\n};\n\n//---------------------------------------------------------------------------------------------------------------------\n// Creates a new single-view viewport inside storage and returns its ID\nexport const set_storage_port_from_page_id = (pageId: ID): ID => {\n    const viewportId = getUniqueId();\n    const portId = getUniqueId();\n    const storagePorts: StoragePorts = get_storage_ports() || {};\n\n    const newPort: PortT = {\n        parentId: null,\n        isSplitView: false,\n        pageIds: [pageId],\n        activePageId: pageId,\n        direction: null,\n        headId: null,\n        tailId: null,\n        isHead: null,\n    };\n\n    const newPorts: PortsT = {\n        [portId]: newPort\n    }\n\n    storagePorts[viewportId] = {\n        open: false,\n        ports: newPorts,\n        rootId: portId,\n    } as StoragePort;\n\n    localStorage.setItem(STORAGE_ID, JSON.stringify(storagePorts));\n\n    return viewportId;\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const set_storage_port_open = (id: ID, open: boolean = true) => {\n    const storagePorts: StoragePorts = get_storage_ports() || {};\n\n    if (id in storagePorts) {\n        storagePorts[id] = { ...storagePorts[id], open } as StoragePort;\n        localStorage.setItem(STORAGE_ID, JSON.stringify(storagePorts));\n    } else {\n        throw new Error(`Could not find id \"${id}\" in storage.`)\n    }\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\n// Window Actions\n//---------------------------------------------------------------------------------------------------------------------\nexport const open_new_viewport_window = (viewportId: string | number) => {\n    const viewport = get_storage_port(viewportId);\n    if (viewport.open) { return; }\n\n    const url = new URL(window.location.href);\n    url.searchParams.set(VIEWPORT_QUERY_ID, viewportId.toString());\n\n    window.open(url, '', `height=${600}, width=${800}`);\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// Returns viewport string or null if not found (i.e. is main page)\n// TODO: What to do for invalid view id or page is already opened?\n// If not a valid id, create new id with blank state\n// if already opened, duplicate it and append to views? Probz not.\n//  First ask user if they would like to duplicate it... Or close it\n// Calling function should handle all this\nexport const get_viewport_id_from_query_params = (): string => {\n    const urlParams = new URLSearchParams(location.search);\n    const viewportId = urlParams.get(VIEWPORT_QUERY_ID);\n\n    return viewportId || '';\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// On drop operations we need to know if we dropped the draggable on\n// a different viewport than the one the draggable originated from\nexport const get_dragged_to_different_viewport = async (timeout: number = 0): Promise<boolean> => {\n    let ret = false;\n    const draggedToDifferentViewport = JSON.parse(\n        localStorage.getItem(DRAGGED_TO_DIFF_VP_ID)\n    );\n\n    set_dragged_to_different_viewport(false);  // cleanup\n\n    if (draggedToDifferentViewport)\n        ret = !!draggedToDifferentViewport;\n\n    return new Promise((resolve, reject) => setTimeout(\n        () => { resolve(ret); },\n        timeout,\n    ));\n    \n}\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const set_dragged_to_different_viewport = (draggedToDifferentViewport: boolean) => {\n    localStorage.setItem(DRAGGED_TO_DIFF_VP_ID, JSON.stringify(draggedToDifferentViewport));\n}","export type DirectionT = 'horizontal' | 'vertical' | 'none';\n\nexport enum SideT {\n    HEAD = \"HEAD\",\n    TAIL = \"TAIL\",\n    NULL = \"NULL\",\n}\n","import { CSSProperties, Dispatch, DragEvent } from \"react\";\nimport { DirectionT, SideT } from \"../SplitPane/SplitPaneTypes\";\nimport { TreeT } from \"./Tree/TreeTypes\";\nimport { PortsT, ViewportStateT } from \"./Viewport/ViewportTypes\";\n\n\nexport type ID = number | string;\nexport const isID = (id: any) => typeof(id) === 'string' || typeof(id) === 'number';\n\nexport type ComponentRendererT = (props: any) => JSX.Element;\n\nexport interface PageT {\n    id: ID,\n    name: string,\n    component: ComponentRendererT,\n    props?: object,\n}\n\nexport type PagesT = { [key: ID]: PageT }\n\nexport type PortMapT = { ports: PortsT, rootId: ID };\n\n\n// Should always have same fields as TupleClassesT\nexport interface TupleStylesT {\n    tuple?: CSSProperties,\n    draggable?: CSSProperties,\n    splitpane?: CSSProperties,\n\n    tree?: CSSProperties,\n    branch?: CSSProperties,\n    branches?: CSSProperties,\n    leafContainer?: CSSProperties,\n    leaf?: CSSProperties,\n    root?: CSSProperties,\n    rootlet?: CSSProperties,\n    rootlets?: CSSProperties,\n    rootletTextBox?: CSSProperties,\n    rootletContainer?: CSSProperties,\n    symbolContainer?: CSSProperties,\n    trashcan?: CSSProperties,\n\n    tabBar?: CSSProperties,\n    tabBarDragOver?: CSSProperties,\n    // tabBarActive?: CSSProperties,  // TODO: when user has selected current view\n    tab?: CSSProperties,\n    tabDragOver?: CSSProperties,\n    tabActive?: CSSProperties,\n    tabLabel?: CSSProperties,\n    tabClose?: CSSProperties,\n\n    viewport?: CSSProperties,\n    view?: CSSProperties,\n    dropZoneCenter?: CSSProperties,\n    dropZoneSide?: CSSProperties,\n    scrollPane?: CSSProperties,\n    pane?: CSSProperties,       // TODO: Probably remove this\n}\n\n\nexport interface TupleClassesT {\n    tuple?: string,\n    draggable?: string,\n    splitpane?: string,\n\n    tree?: string,\n    branch?: string,\n    branches?: string,\n    leafContainer?: string,\n    leaf?: string,\n    root?: string,\n    rootlet?: string,\n    rootlets?: string,\n    rootletTextBox?: string,\n    rootletContainer?: string,\n    symbolContainer?: string,\n    trashcan?: string,\n\n    tabBar?: string,\n    tabBarDragOver?: string,\n    // tabBarActive?: string,  // TODO: when user has selected current view\n    tab?: string,\n    tabDragOver?: string,\n    tabActive?: string,\n    tabLabel?: string,\n    tabClose?: string,\n\n    viewport?: string,\n    view?: string,\n    dropZoneCenter?: string,\n    dropZoneSide?: string,\n    scrollPane?: string,\n    pane?: string,              // TODO: Probably remove this\n}\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// Events\n//----------------------------------------------------------------------------------------------------------------------\nexport type DragSourceT = 'tree' | 'viewport';\nexport type DropDestinationT = 'branch' | 'leaf';\n\nexport interface EventsT {\n    onTreeDrop?: (\n        e: DragEvent,\n        destinationItem: string,\n        path: string[],\n        sourceItem: string,\n        sourceType: DragSourceT,\n        destinationType: DropDestinationT,\n    ) => void\n}\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// Local Storage\n//----------------------------------------------------------------------------------------------------------------------\nexport interface StoragePort {\n    open: boolean,\n    ports: PortsT,\n    rootId: ID,\n}\n\nexport interface StoragePorts { [key: ID]: StoragePort }\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// State Types\n//----------------------------------------------------------------------------------------------------------------------\nexport interface TupleStateT {\n    pages: PagesT,\n    viewport: ViewportStateT,\n    viewportId: string,\n    tree: TreeT,\n    styles: TupleStylesT,\n    classes: TupleClassesT,\n    events: EventsT,\n}\n\nexport interface TupleContextT {\n    dispatch: Dispatch<TupleActionT>,\n    state: TupleStateT,\n}\n\nexport enum TupleActionKind {\n    ADD_TAB=\"ADD_TAB\",\n    REMOVE_TAB=\"REMOVE_TAB\",\n\n    ADD_NEW_VIEW=\"ADD_NEW_VIEW\",\n    ADD_VIEW=\"ADD_VIEW\",\n    REMOVE_VIEW=\"REMOVE_VIEW\",\n    CHANGE_ACTIVE_VIEW=\"CHANGE_ACTIVE_VIEW\",\n}\n\nexport interface AddTabPayloadT { portId: ID, pageId: ID, dragPortId: ID, index: number };\nexport interface AddTabActionT { type: TupleActionKind.ADD_TAB, payload: AddTabPayloadT };\n\nexport interface RemoveTabPayloadT { portId: ID, index: number };\nexport interface RemoveTabActionT { type: TupleActionKind.REMOVE_TAB, payload: RemoveTabPayloadT };\n\nexport interface AddNewViewPayloadT { pageId: ID };\nexport interface AddNewViewActionT { type: TupleActionKind.ADD_NEW_VIEW, payload: AddNewViewPayloadT };\n\nexport interface AddViewPayloadT { dragPortId: ID, portId: ID, pageId: ID, side: SideT, direction: DirectionT };\nexport interface AddViewActionT { type: TupleActionKind.ADD_VIEW, payload: AddViewPayloadT };\n\nexport interface RemoveViewPayloadT { portId: ID };\nexport interface RemoveViewActionT { type: TupleActionKind.REMOVE_VIEW, payload: RemoveViewPayloadT };\n\nexport interface ChangeActiveViewPayloadT { portId: ID, pageId: ID };\nexport interface ChangeActiveViewActionT { type: TupleActionKind.CHANGE_ACTIVE_VIEW, payload: ChangeActiveViewPayloadT };\n\nexport type TupleActionT = AddTabActionT\n                         | RemoveTabActionT\n                         | AddNewViewActionT\n                         | AddViewActionT\n                         | RemoveViewActionT\n                         | ChangeActiveViewActionT;\n","import { Dispatch } from \"react\";\nimport { DropSideT } from \"../../Dropzone/DropZoneTypes\";\nimport { SideT } from \"../../SplitPane/SplitPaneTypes\";\nimport {\n    AddNewViewActionT,\n    AddNewViewPayloadT,\n    AddTabActionT,\n    AddViewActionT,\n    AddViewPayloadT,\n    ChangeActiveViewActionT,\n    ID,\n    RemoveTabActionT,\n    RemoveViewActionT,\n    TupleActionKind,\n    TupleActionT,\n} from \"../TupleTypes\";\n\n\n//------------------------------------------------------------------------------------------------------------------\n// Actions Dispatchers\n//------------------------------------------------------------------------------------------------------------------\nexport const addTab = (\n    dispatch: Dispatch<TupleActionT>,\n    portId: ID,\n    dragPortId: ID,\n    dragPageId: ID,\n    index: number = 0,\n) => {\n    const addTabAction: AddTabActionT = {\n        type: TupleActionKind.ADD_TAB,\n        payload: { portId, pageId: dragPageId, dragPortId, index: index },\n    };\n\n    dispatch(addTabAction);\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const removeTab = (\n    dispatch: Dispatch<TupleActionT>,\n    portId: ID,\n    index: number,\n) => {\n    const removeTabAction: RemoveTabActionT = {\n        type: TupleActionKind.REMOVE_TAB,\n        payload: { portId, index }\n    };\n\n    dispatch(removeTabAction);\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const addNewView = (\n    dispatch: Dispatch<TupleActionT>,\n    pageId: ID,\n) => {\n    const addNewViewPayload: AddNewViewPayloadT = { pageId };\n\n    const addNewViewAction: AddNewViewActionT = {\n        type: TupleActionKind.ADD_NEW_VIEW,\n        payload: addNewViewPayload,\n    };\n\n    dispatch(addNewViewAction);\n};\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const addView = (\n    dispatch: Dispatch<TupleActionT>,\n    portId: ID,\n    dragPortId: ID,\n    dragPageId: ID,\n    side: DropSideT\n) => {\n    const addViewPayload: AddViewPayloadT = {\n        dragPortId,\n        portId: portId,\n        pageId: dragPageId,\n        side: SideT.NULL,\n        direction: 'none',\n    };\n\n    switch(side) {\n        case DropSideT.TOP:\n            addViewPayload.side = SideT.HEAD;\n            addViewPayload.direction = \"vertical\";\n            break;\n        case DropSideT.RIGHT:\n            addViewPayload.side = SideT.TAIL;\n            addViewPayload.direction = \"horizontal\";\n            break;\n        case DropSideT.BOTTOM:\n            addViewPayload.side = SideT.TAIL;\n            addViewPayload.direction = \"vertical\";\n            break;\n        case DropSideT.LEFT:\n            addViewPayload.side = SideT.HEAD;\n            addViewPayload.direction = \"horizontal\";\n            break;\n        default:\n            throw Error('Unknown side.')\n    }\n\n    const addViewAction: AddViewActionT = {\n        type: TupleActionKind.ADD_VIEW,\n        payload: addViewPayload,\n    };\n\n    dispatch(addViewAction);\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const removeView = (\n    dispatch: Dispatch<TupleActionT>,\n    portId: ID,\n) => {\n    const removeViewAction: RemoveViewActionT = {\n        type: TupleActionKind.REMOVE_VIEW,\n        payload: { portId }\n    }\n\n    dispatch(removeViewAction);\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const changeView = (\n    dispatch: Dispatch<TupleActionT>,\n    portId: ID,\n    pageId: ID,\n) => {\n    const changeActiveViewAction: ChangeActiveViewActionT = {\n        type: TupleActionKind.CHANGE_ACTIVE_VIEW,\n        payload: { portId, pageId }\n    };\n\n    dispatch(changeActiveViewAction); \n}\n","import { DragEvent, useContext } from 'react'\nimport { useLocalStorage } from 'usehooks-ts';\n\nimport { TupleContext } from '..';\nimport { cleanupDraggable, outsideWindow, setCustomDragImage } from '../../Draggable';\nimport {\n    DRAGGING_ID,\n    get_dragged_to_different_viewport,\n    open_new_viewport_window,\n    set_storage_port_from_page_id\n} from '../state/browser-actions';\nimport { addTab, addNewView } from '../state/dispatchers';\nimport { DragSourceT, ID, TupleContextT } from '../TupleTypes';\nimport { PortsT } from '../Viewport/ViewportTypes';\n\nimport _classes from './tree.module.css';\n\n\ninterface Props {\n    text: string,\n    pageId: ID,\n    path: string[],\n}\n\n\nconst Leaf = ({\n    text,\n    pageId,\n    path,\n}: Props) => {\n    const {\n        dispatch,\n        state: {\n            pages,\n            viewport,\n            classes,\n            styles,\n            events,\n        }\n    }: TupleContextT = useContext(TupleContext);\n\n    const [_, setDragging] = useLocalStorage(DRAGGING_ID, false);\n\n    const leafClassName = `\n        ${_classes?.leaf || ''}\n        ${classes?.leaf  || ''}`;\n\n    const draggableClass = classes?.draggable || '';\n\n\n    const getTopLeftPortIdHelper = (ports: PortsT, curPortId: ID): ID | null => {\n        const currentPort = ports[curPortId];\n        if (!currentPort)\n            return null;\n\n        if (!ports[curPortId].isSplitView)\n            return curPortId;\n\n        return getTopLeftPortIdHelper(ports, currentPort.headId);\n    }\n\n    const getTopLeftPortId = (): ID | null => {\n        const {root, ports} = viewport;\n        return getTopLeftPortIdHelper(ports, root);\n    }\n\n    const dragStartHandler = (e: any) => {\n        setCustomDragImage(e, text, draggableClass, styles.draggable);\n        e.dataTransfer.setData('pageId', pageId);\n        setDragging(true);\n    };\n\n    const dragEndHandler = async (e: DragEvent) => {\n        cleanupDraggable();\n        setDragging(false);\n\n        const { clientX: x, clientY: y } = e;\n        if (outsideWindow(x, y)) {\n            if (!( await get_dragged_to_different_viewport() )) {\n                const newViewportId = set_storage_port_from_page_id(pageId);\n                open_new_viewport_window(newViewportId);\n            }\n        }\n    }\n\n    const dragOverHandler = (e: DragEvent) => {\n        if (events?.onTreeDrop)\n            e.preventDefault();\n    }\n\n    const dropHandler = (e: DragEvent) => {\n        if (events?.onTreeDrop) {\n            const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n            const draggableName = pages[dragPageId].name;\n\n            const portId = e.dataTransfer && e.dataTransfer.getData('portId');\n            const source: DragSourceT = !!portId ? 'viewport' : 'tree';\n\n            events.onTreeDrop(e, text, path, draggableName, source, 'leaf');\n        }\n    }\n\n    const onClickHandler = () => {\n        if (Object.keys(pages).length <= 0) {\n            addNewView(dispatch, pageId)\n        }\n\n        const topLeftPortId = getTopLeftPortId();\n        if (topLeftPortId) {\n            addTab(dispatch, topLeftPortId, '', pageId);\n        } else {\n            addNewView(dispatch, pageId);\n        }\n    }\n\n    return (\n        <div\n            style={styles.leaf}\n            className={leafClassName}\n            draggable\n            onDragStart={dragStartHandler}\n            onDragEnd={dragEndHandler}\n            onDragOver={dragOverHandler}\n            onDrop={dropHandler}\n            onClick={onClickHandler}>\n            { text }\n        </div>\n    );\n};\n\n\nexport default Leaf;\n","import {\n    ReactNode,\n    useState,\n    CSSProperties,\n    Children,\n    useContext,\n    DragEvent,\n} from 'react';\n\nimport { DragSourceT, TupleContextT } from '../TupleTypes';\nimport { TupleContext } from '..';\n\nimport _classes from './tree.module.css';\nimport _global_classes from '../../styles.module.css';\n\n\ninterface Props {\n    text: string,\n    children: ReactNode,\n    open?: boolean,\n    branchClassName?: string,\n    branchesClassName?: string,\n    branchStyle?: CSSProperties,\n    branchesStyle?: CSSProperties,\n    path?: string[],\n}\n\n\nconst Branch = ({\n    text,\n    children,\n    open=false,\n    branchClassName,\n    branchesClassName,\n    branchStyle={},\n    branchesStyle={},\n    path=[]\n}: Props) => {\n    const { state: {\n        pages,\n        events,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const [expanded, setExpanded] = useState(open);\n\n    // Branch needs its styling passed in as prop because both branches and roots use this component\n    const _branchClassName = `\n        ${_global_classes.noHighlight}\n        ${branchClassName || ''}`;\n\n    const clickHandler = () => {\n        if (Children.count(children))\n            setExpanded(cur => !cur);\n    }\n\n    const dragOverHandler = (e: DragEvent) => {\n        if (events?.onTreeDrop)\n            e.preventDefault();\n    }\n\n    const dropHandler = (e: DragEvent) => {\n        if (events?.onTreeDrop) {\n            const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n            const draggableName = pages[dragPageId].name;\n\n            const portId = e.dataTransfer && e.dataTransfer.getData('portId');\n            const source: DragSourceT = !!portId ? 'viewport' : 'tree';\n\n            events.onTreeDrop(e, text, path, draggableName, source, 'branch');\n        }\n    }\n    \n    return (\n        <div>\n            <div\n                className={_branchClassName}\n                style={branchStyle}\n                onClick={clickHandler}\n                onDragOver={dragOverHandler}\n                onDrop={dropHandler}>\n                { text }\n            </div>\n            { expanded && (\n                <div className={branchesClassName} style={branchesStyle}>\n                    { children }\n                </div>\n            )}\n        </div>\n    );\n}\n\n\nexport default Branch;\n","import {\n    ReactNode,\n    useContext,\n    MouseEvent as rMouseEvent,\n    useRef,\n    DragEvent,\n    useState\n} from 'react'\n\nimport { TupleContext } from '..';\nimport { cleanupDraggable, setCustomDragImage } from '../../Draggable';\nimport { open_new_viewport_window, rename_storage_port_key } from '../state/browser-actions';\nimport { TupleContextT } from '../TupleTypes';\n\nimport _classes from './tree.module.css';\n\n\ninterface Props {\n    text: string,\n    open: boolean,\n    openSymbol?: string | ReactNode, //TODO: Maybe a part of context?\n    closeSymbol?: string | ReactNode,\n    hoverSymbol?: string | ReactNode\n}\n\n\nconst Rootlet = ({\n    text,\n    open,\n    closeSymbol='\\u25CB',\n    openSymbol='\\u25CF',\n    hoverSymbol='\\u25C9'\n}: Props) => {\n    const [_text, setText] = useState(text);\n    const [hoveringSymbol, setHoveringSymbol] = useState(false);\n    const textboxRef = useRef<HTMLInputElement>();\n\n    const displaySymbol = open\n        ? openSymbol\n        : (hoveringSymbol ? hoverSymbol : closeSymbol);\n\n    const { state: {\n        classes,\n        styles,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const rootletClassName = `\n        ${_classes?.rootlet || ''}\n        ${classes?.rootlet  || ''}`;\n\n    const symbolContainerClassName = `\n        ${_classes?.symbolContainer}\n        ${classes?.symbolContainer  || ''}`\n\n    const rootletTextBoxClassName = `\n        ${_classes?.rootletTextBox}\n\n        ${classes?.rootletTextBox  || ''}`\n\n    const draggableClass = classes?.draggable || '';\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Event Handlers\n    //------------------------------------------------------------------------------------------------------------------\n    const mouseEnterHandler = () => setHoveringSymbol(true);\n    const mouseLeaveHandler = () => setHoveringSymbol(false);\n\n    const doubleClickHandler = () => open_new_viewport_window(_text);\n    const textDoubleClickHandler = (e: rMouseEvent) => e.stopPropagation();\n\n    const textChangeHandler = (e: any) => {\n        const { value: newText } = e.target;\n        const renamed: boolean = rename_storage_port_key(_text, newText);\n        if (renamed)\n            setText(newText);\n    }\n\n    const dragStartHandler = (e: DragEvent) => {\n        setCustomDragImage(e, _text, draggableClass, styles.draggable);\n    }\n\n    const dragEndHandler = () => {\n        cleanupDraggable();\n        open_new_viewport_window(_text);\n    }\n\n    return (\n        <div draggable className={ rootletClassName }\n            style           ={ styles.rootlet }\n            onDoubleClick   ={ doubleClickHandler }\n            onDragStart     ={ dragStartHandler }\n            onDragEnd       ={ dragEndHandler }\n            onMouseEnter    ={ mouseEnterHandler }\n            onMouseLeave    ={ mouseLeaveHandler }>\n            <>\n                <div className={symbolContainerClassName} style={styles.symbolContainer}>\n                    { displaySymbol }\n                </div>\n\n                <input type=\"text\" ref={ textboxRef }\n                    id              ={ _text }\n                    name            ={ _text }\n                    value           ={ _text }\n                    className       ={ rootletTextBoxClassName }\n                    style           ={ styles.rootletTextBox }\n                    onDoubleClick   ={ textDoubleClickHandler }\n                    onChange        ={ textChangeHandler }\n                />\n            </>\n        </div>\n    );\n};\n\n\nexport default Rootlet;\n","import { useContext } from 'react';\nimport { useLocalStorage } from 'usehooks-ts';\n\nimport { TupleContext } from '..';\nimport { STORAGE_ID } from '../state/browser-actions';\nimport { StoragePorts, TupleContextT } from '../TupleTypes';\nimport { default as Taproot } from './Branch'\nimport Rootlet from './Rootlet';\n\nimport _classes from './tree.module.css';\nimport { RootletDisplayT } from './TreeTypes';\n\n\nexport interface Props {\n    rootName: string,\n}\n\n\nconst Root = ({\n    rootName,\n}: Props) => {\n    const { state: {\n        classes,\n        styles,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const rootClassName = `\n        ${_classes?.root || ''}\n        ${classes?.root  || ''}`;\n\n\n    const rootletsClassName = `\n        ${_classes?.rootlets || ''}\n        ${classes?.rootlets  || ''}`;\n\n    const getRootlets = (): RootletDisplayT[] => {\n        //TODO: Implement local storage fetching\n        const [rootlets, _] = useLocalStorage<StoragePorts>(STORAGE_ID, null);\n        if (rootlets) {\n            return Object.entries(rootlets).map(rootlet => ({\n                text: rootlet[0] as string,\n                open: rootlet[1].open as boolean,\n            }));\n        }\n        return [];\n    }\n\n    let rootlets = getRootlets();\n    rootlets = rootlets.filter((r: RootletDisplayT) => r.text !== 'root');\n\n    return (\n        <Taproot text={rootName}\n            branchClassName={rootClassName}\n            branchesClassName={rootletsClassName}\n            branchStyle={styles.rootlets}\n            branchesStyle={styles.rootlets}\n        >\n            { rootlets.map( r => (\n                <Rootlet text={r.text} open={r.open} />\n            ))}\n        </Taproot>\n    );\n}\n\n\nexport default Root;","import { ID } from \"../TupleTypes\";\n\nexport interface LeafT {\n    id: ID,\n    pageId: ID,\n}\n\nexport interface BranchT {\n    id: ID,\n    label: string,\n    branches: (LeafT | BranchT)[],\n}\n\n// Helper function to distinguishg leaves from branches\nexport const isLeaf = (node: LeafT | BranchT): boolean => !!(node as LeafT)?.pageId;\n\nexport type TreeT = (LeafT | BranchT)[];\n\nexport interface RootletDisplayT {\n    text: string,\n    open: boolean,\n}\n","import { DragEvent, useContext, useState } from 'react';\nimport { useLocalStorage } from 'usehooks-ts';\nimport { TupleContext } from '..';\nimport { DRAGGING_ID } from '../state/browser-actions';\nimport { TupleContextT } from '../TupleTypes';\n\nimport _classes from './tree.module.css';\n\nexport interface Props {\n    symbol?: string,\n    dragOverSymbol?: string,\n}\n\n\nconst Trashcan = ({\n    symbol='\\u267B',\n    dragOverSymbol='\\u267B',\n}: Props) => {\n    const [draggingOver, setDraggingOver] = useState(false);\n    const [visible, setVisible ] = useLocalStorage(DRAGGING_ID, false);\n\n    if (!visible) return null;\n\n    const { state: {\n        classes,\n        styles,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const trashcanClassName = `\n        ${_classes?.trashcan || ''}\n        ${classes?.trashcan  || ''}\n        ${draggingOver ? _classes.trashcanHover : ''}`;\n\n\n    const dragOverHandler = (e: DragEvent) => {\n        e.preventDefault();\n        setDraggingOver(true);\n    }\n\n    const dragLeaveHandler = () => setDraggingOver(false);\n\n    const dropHandler = () => {\n        setVisible(false);\n        setDraggingOver(false);\n    }\n\n    return (\n        <div className={trashcanClassName}\n            style={styles.trashcan}\n            onDragEnter={()=>{}}\n            onDragOver={dragOverHandler}\n            onDragLeave={dragLeaveHandler}\n            onDrop={dropHandler}>\n            { draggingOver ? dragOverSymbol : symbol }\n        </div>\n    );\n}\n\n\nexport default Trashcan;","import { useContext, useEffect, useRef, useState } from 'react';\n\nimport Leaf from './Leaf';\nimport Branch from './Branch';\nimport Root from './Root';\nimport { TupleContext } from '..';\nimport { BranchT, LeafT, isLeaf } from './TreeTypes';\nimport { ID, PageT, TupleContextT } from '../TupleTypes';\n\nimport _classes from './tree.module.css';\nimport Trashcan from './Trashcan';\nimport ScrollPane from '../../ScrollPane';\n\n\ninterface BranchesProps {\n    node: BranchT | LeafT,\n    path: string[],\n}\n\n// Recursive tree component\nconst Branches = ({ node, path }: BranchesProps, ) => {\n    const { state: {\n        pages,\n        classes,\n        styles,\n    }}: TupleContextT = useContext(TupleContext);\n\n    if (isLeaf(node)) {\n        const leaf = node as LeafT;\n        const page: PageT = pages[leaf.pageId];\n\n        if (!page)\n            throw `Page ID not found within \"pages\": [${ leaf.pageId }]`;\n\n        return <Leaf text={page.name} pageId={leaf.pageId} path={path} />;\n    }\n\n    const branch = node as BranchT;\n\n    const branchClassName = `${_classes?.branch || ''} ${classes?.branch || ''}`\n    const branchesClassName = `${_classes?.branches || ''} ${classes?.branches  || ''}`;\n\n    console.log('branch', branch)\n\n    return (\n        <Branch\n            text                ={ branch.label }\n            branchClassName     ={ branchClassName }\n            branchesClassName   ={ branchesClassName }\n            branchStyle         ={ styles.branch }\n            branchesStyle       ={ styles.branches }\n        >\n            { branch.branches.map( _node => (\n                <Branches\n                    key     ={ _node.id }\n                    node    ={ _node }\n                    path    ={ path.concat(`/${branch.label}`) }\n                />\n            ))}\n        </Branch>\n    );\n};\n\n\ninterface TreeProps { enableTrashcan: boolean };\n\nconst Tree = ({ enableTrashcan }: TreeProps) => {\n    const treeRef = useRef<HTMLDivElement>();\n    const rootContainerRef = useRef<HTMLDivElement>();\n\n    const { state: {\n        tree,\n        classes,\n        styles,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const [scrollPaneHeight, setScrollPaneHeight] = useState<number>(0);\n\n    // TODO: What's going on here?\n    useEffect( () => {\n        const treeHeight = treeRef.current.clientHeight;\n        const rootHeight = rootContainerRef.current.clientHeight;\n\n        setScrollPaneHeight(treeHeight - rootHeight);\n    }, [ treeRef, rootContainerRef, setScrollPaneHeight ]);\n\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Styling\n    //------------------------------------------------------------------------------------------------------------------\n\n    // CSSModules\n    const treeClassName = `${ _classes?.tree || '' } ${ classes?.tree  || '' }`;\n    const scrollPaneClassName = `${_classes.contentContainer} ${classes.scrollPane}`;\n\n    // Styles\n    const scrollPaneStyle = { ...styles?.scrollPane, height: scrollPaneHeight }\n    //------------------------------------------------------------------------------------------------------------------\n\n    return (\n        <div ref={treeRef} className={treeClassName} style={styles.tree}>\n            <div ref={rootContainerRef}>\n                <Root rootName='Tuple' />\n            </div>\n\n            <ScrollPane className={scrollPaneClassName} style={scrollPaneStyle}>\n                <>\n                    { tree.map( node => (\n                        <Branches\n                            key ={ node.id }\n                            node={ node }\n                            path={ [] }/>\n                    ))}\n                </>\n            </ScrollPane>\n\n            { enableTrashcan && (\n                <Trashcan symbol='' dragOverSymbol=''/> \n            )}\n        </div>\n    );\n}\n\n\nexport default Tree;\n","import {\n    useState,\n    useRef,\n    MutableRefObject,\n    useContext,\n    DragEvent,\n    useEffect,\n    MouseEvent as rMouseEvent,\n} from 'react';\nimport { useLocalStorage } from 'usehooks-ts';\n\nimport { TupleContext } from '../../..';\nimport {\n    cleanupDraggable,\n    outsideWindow,\n    setCustomDragImage,\n    validateDraggable\n} from '../../../../Draggable';\nimport {\n    DRAGGING_ID,\n    get_dragged_to_different_viewport,\n    open_new_viewport_window,\n    set_dragged_to_different_viewport,\n    set_storage_port_from_page_id,\n} from '../../../state/browser-actions';\nimport { addTab, changeView, removeTab } from '../../../state/dispatchers';\nimport { ID, TupleContextT } from '../../../TupleTypes';\n\nimport _classes from './tabbar.module.css';\n\n\nexport interface TabProps {\n    portId: ID,\n    index: number,\n    pageId: ID,  // This also serves as a unique id for tab\n}\n\n\nexport const Tab = ({\n    portId,\n    index,\n    pageId,\n}: TabProps) => {\n    const {\n        dispatch,\n        state:{ pages, classes, styles, viewport, viewportId },\n    }: TupleContextT = useContext(TupleContext);\n\n    useEffect(() => {\n        cleanupDraggable();\n    }, [cleanupDraggable]);\n\n    const tabRef = useRef<HTMLDivElement>();\n    const [closeVisible, setCloseVisible] = useState(false);\n    const [_, setDragging] = useLocalStorage(DRAGGING_ID, false);\n\n    const label = pages[pageId].name;\n    const port = viewport.ports[portId];\n    const isActiveTab = pageId === port.activePageId;\n\n    const inactiveTabClassName = `\n        ${_classes?.tab || ''}\n        ${classes?.tab  || ''}`;\n\n    const activeTabClassName = `\n        ${inactiveTabClassName}\n        ${_classes?.tabActive || ''}\n        ${classes?.tabActive  || ''}`;\n\n    const tabClassName = isActiveTab\n        ? activeTabClassName\n        : inactiveTabClassName;\n\n    const tabLabelClassName = `\n        ${_classes?.tabLabel || ''}\n        ${classes?.tabLabel  || ''}`;\n\n    const tabCloseClassName = `\n        ${_classes?.tabClose || ''}\n        ${classes?.tabClose  || ''}`;\n\n    const draggableClass = classes?.draggable || '';\n\n    const tabStyle = isActiveTab\n            ? {...styles.tab, ...styles.tabActive}\n            : styles.tab;\n\n    // Note: Unfortunate, but much of Tuple's CSS relies on tab height.\n    //       This is a hack in case the user changes it in their custom CSS.\n    useEffect(() => {\n        const rootCSS = document.querySelector(':root') as HTMLDivElement;\n        const tabbarHeight = tabRef.current?.clientHeight;\n        rootCSS.style.setProperty('--TAB-HEIGHT', `${tabbarHeight.toString()}px`);\n    }, [tabRef]);\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Event Handlers\n    //------------------------------------------------------------------------------------------------------------------\n    const mouseEnterHandler = () => setCloseVisible(true);\n    const mouseLeaveHandler = () => setCloseVisible(false);\n\n    const clickHandler = () => changeView(dispatch, portId, pageId);\n\n    const dragStartHandler = (e: DragEvent<HTMLDivElement>) => {\n        setCloseVisible(false);\n        setCustomDragImage(e, label, draggableClass, styles.draggable);\n        setDragging(true);\n\n        e.dataTransfer && e.dataTransfer.setData('pageId', pageId.toString());\n        e.dataTransfer && e.dataTransfer.setData('portId', portId.toString());\n        e.dataTransfer && e.dataTransfer.setData('viewportId', viewportId.toString());\n    };\n\n    const dropHandler = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (tabRef.current)\n            tabRef.current.style.opacity = '1';\n\n        if (!validateDraggable(e)) return;\n\n        const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n        const dragPortId = e.dataTransfer && e.dataTransfer.getData('portId');\n        const dragViewportId = e.dataTransfer && e.dataTransfer.getData('viewportId');\n\n        if (dragViewportId !== viewportId) {\n            set_dragged_to_different_viewport(true);\n        }\n\n        addTab(dispatch, portId, dragPortId, dragPageId, index+1);\n    }\n\n    const dragOverHandler = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // TODO: Better solution for this\n        if (tabRef.current)\n            tabRef.current.style.opacity = '0.7';\n    }\n\n    const dragLeaveHandler = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (tabRef.current)\n            tabRef.current.style.opacity = '1';\n    }\n\n    const dragEndHandler = async (e: DragEvent<HTMLDivElement>) => {\n        setDragging(false);\n        cleanupDraggable();\n        removeTabHandler();\n\n        const { clientX: x, clientY: y } = e;\n        if (outsideWindow(x, y)) {\n            if (!( await get_dragged_to_different_viewport() )) {\n                const newViewportId = set_storage_port_from_page_id(pageId);\n                open_new_viewport_window(newViewportId);\n            }\n        }\n    }\n\n    const onCloseClickHandler = (e: rMouseEvent) => {\n        e.stopPropagation();\n        removeTabHandler();\n    }\n\n    const removeTabHandler = () => removeTab(dispatch, portId, index);\n\n    return (\n        <div ref={tabRef as MutableRefObject<HTMLDivElement> }\n            draggable \n            style={tabStyle}\n            className={tabClassName}\n\n            onDragStart={dragStartHandler}\n            onDragEnd={dragEndHandler}\n            onDragEnter={dragOverHandler}\n            onDragOver={dragOverHandler}\n            onDragLeave={dragLeaveHandler}\n            onDrop={dropHandler}\n\n            onMouseOver={mouseEnterHandler}\n            onMouseLeave={mouseLeaveHandler}\n            onClick={clickHandler}\n        >\n            <div\n                style={styles.tabLabel}\n                className={tabLabelClassName}>\n                { label }\n            </div>\n            <div className={_classes.tabCloseContainer}>\n                { closeVisible &&\n                    <div\n                        style={styles.tabClose}\n                        className={tabCloseClassName}\n                        onClick={onCloseClickHandler}>\n                        { \"\\u2716\" }\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\n\n\nexport default Tab;\n","import { useContext, DragEvent as rDragEvent } from 'react';\n\nimport { TupleContext } from '../../..';\nimport { ID, TupleContextT } from '../../../TupleTypes';\nimport Tab from './Tab';\nimport { addTab } from '../../../state/dispatchers';\nimport { set_dragged_to_different_viewport } from '../../../state/browser-actions';\n\nimport _classes from './tabbar.module.css';\nimport _global_classes from '../../../../styles.module.css';\nimport { validateDraggable } from '../../../../Draggable';\n\n\ninterface Props {\n    portId: ID,\n    pageIds: ID[],\n}\n\n\nconst TabBar = ({\n    portId,\n    pageIds,\n}: Props) => {\n    const {\n        dispatch,\n        state:{ classes, styles, viewportId }\n    }: TupleContextT = useContext(TupleContext);\n    \n    const tabBarClassName = `\n        ${_global_classes.noScrollbar}\n        ${_classes?.tabBar || ''}\n        ${classes?.tabBar  || ''}`;\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Event Handlers\n    //------------------------------------------------------------------------------------------------------------------\n    const dragOverHandler = (e: rDragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    const dropHandler = (e: rDragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!validateDraggable(e)) return;\n\n        const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n        const dragPortId = e.dataTransfer && e.dataTransfer.getData('portId');\n        const dragViewportId = e.dataTransfer && e.dataTransfer.getData('viewportId');\n\n        if (dragViewportId !== viewportId) {\n            set_dragged_to_different_viewport(true);\n        }\n\n        addTab(dispatch, portId, dragPortId, dragPageId, pageIds.length);\n    }\n\n    return (\n        <div className={tabBarClassName}\n            style={styles?.tabBar}\n            onDragOver={dragOverHandler}\n            onDrop={dropHandler}\n        >\n            { pageIds.map((pid, i) => (\n                <Tab\n                    key={pid}\n                    portId={portId}\n                    index={i}\n                    pageId={pid}/>\n            ))}\n        </div>\n    );\n};\n\n\nexport default TabBar;","import { useContext, DragEvent } from 'react';\nimport { useLocalStorage } from 'usehooks-ts';\n\nimport TabBar from './TabBar/TabBar';\nimport { TupleContext } from '../..';\nimport { ID, PageT, TupleContextT } from '../../TupleTypes';\n\nimport { DropSideT } from '../../../Dropzone/DropZoneTypes';\nimport { addTab, addView } from '../../state/dispatchers';\nimport ScrollPane from '../../../ScrollPane';\nimport DropZone from '../../../Dropzone';\nimport { DRAGGING_ID, set_dragged_to_different_viewport } from '../../state/browser-actions';\nimport { validateDraggable } from '../../../Draggable';\n\nimport _classes from './view.module.css';\n\n\ninterface Props {\n    portId: ID,\n    pageIds: ID[],\n    activePageId: ID,\n}\n\n\nconst View = ({\n    portId,\n    pageIds,\n    activePageId,\n}: Props) => {\n    if (pageIds && pageIds.length <= 0)\n        return null;\n\n    const {\n        dispatch,\n        state: { pages, styles, classes, viewportId }\n    }: TupleContextT = useContext(TupleContext);\n\n    const ActivePage: PageT = pages[activePageId];\n    const [_, setDragging] = useLocalStorage(DRAGGING_ID, false)\n\n    const viewClassName = `\n        ${_classes?.view || ''}\n        ${classes?.view  || ''}`;\n\n    const scrollPaneClassName = `\n        ${_classes.contentContainer}\n        ${classes.scrollPane}`;\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Event Handlers\n    //------------------------------------------------------------------------------------------------------------------\n    const dropSideHandler = (e: DragEvent<Element>, side: DropSideT) => {\n        const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n        const dragPortId = e.dataTransfer && e.dataTransfer.getData('portId');\n        const dragViewportId = e.dataTransfer && e.dataTransfer.getData('viewportId');\n\n        setDragging(false);\n\n        if (dragViewportId !== viewportId) {\n            set_dragged_to_different_viewport(true);\n        }\n\n        addView(dispatch, portId, dragPortId, dragPageId, side);\n    }\n\n    const dropCenterHandler = (e: DragEvent<Element>) => {\n        // TODO: Better interface for getting dataTransfer data\n        const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n        const dragPortId = e.dataTransfer && e.dataTransfer.getData('portId');\n        const dragViewportId = e.dataTransfer && e.dataTransfer.getData('viewportId');\n\n        setDragging(false);\n\n        if (dragViewportId !== viewportId) {\n            set_dragged_to_different_viewport(true);\n        }\n\n        addTab(dispatch, portId, dragPortId, dragPageId);\n    }\n\n    return (\n        <div\n            className={viewClassName}\n            style={styles?.view}>\n            <TabBar portId={portId} pageIds={pageIds} />\n            <DropZone\n                dropZoneRootStyle       = {styles.pane}\n                centerDropZoneStyle     = {styles.dropZoneCenter}\n                sidesDropZoneStyle      = {styles.dropZoneSide}\n                dropZoneRootClassName   = {classes.pane}\n                centerDropZoneClassName = {classes.dropZoneCenter}\n                sidesDropZoneClassName  = {classes.dropZoneSide}\n                dropCenterCb            = {dropCenterHandler}\n                dropSidesCb             = {dropSideHandler}\n                validateDraggable       = {validateDraggable}>\n\n                <ScrollPane className={scrollPaneClassName} style={styles?.scrollPane || null}>\n                    <ActivePage.component {...ActivePage.props } />\n                </ScrollPane>\n\n            </DropZone>\n        </div>\n    );\n}\n\nexport default View;","//----------------------------------------------------------------------------------------------------------------------\n// Recursive component tree of Views and SplitPanes that make up a Viewport\n//----------------------------------------------------------------------------------------------------------------------\n\nimport { useContext, useEffect } from \"react\";\n\nimport SplitPane from \"../../SplitPane\";\nimport { DirectionT } from \"../../SplitPane/SplitPaneTypes\";\nimport { ID } from \"../TupleTypes\";\nimport View from \"./View/View\";\nimport { TupleContext } from \"..\";\nimport { TupleContextT } from \"../TupleTypes\";\nimport { PortT } from './ViewportTypes';\nimport { removeView } from \"../state/dispatchers\";\n\n//----------------------------------------------------------------------------------------------------------------------\ninterface PortProps { id: ID }\n\n\nconst Port = ({ id }: PortProps): JSX.Element => {\n    const {\n        dispatch,\n        state: { viewport }\n    }: TupleContextT = useContext(TupleContext);\n\n    const port: PortT = viewport?.ports && viewport?.ports[id];\n\n    useEffect(() => {  // When list becomes empty\n        if (port && port.pageIds && port.pageIds.length <= 0) {\n            removeView(dispatch, id);\n        }\n    }, [port]);\n\n    //------------------------------------------------------------------------------------------------------------------\n    // VIEW\n    //------------------------------------------------------------------------------------------------------------------\n    if (port && !port.headId) {\n        return (\n            <View\n                portId={id}\n                pageIds={port.pageIds as ID[]}\n                activePageId={port.activePageId as ID}\n            />\n        );\n    }\n    \n    //------------------------------------------------------------------------------------------------------------------\n    // SPLIT-VIEW\n    //------------------------------------------------------------------------------------------------------------------\n    if (port && port?.headId) {\n        const head = <Port id={port.headId} />\n        const tail = <Port id={port.tailId as ID} />\n\n        return (\n            <SplitPane\n                dir={port.direction as DirectionT}\n                resizerPos='50%'>\n                {/* TODO: add resizerPos to SplitViewT */}\n                { port.headId && head }\n                { port.tailId && tail }\n            </SplitPane>\n        );\n    }\n\n    throw Error('Invalid argument. Paramater \"view\" needs to be SplitViewT or ViewT');\n};\n\n\nexport default Port;\n","import { useContext, DragEvent } from 'react';\nimport { TupleContext } from '../..';\n\nimport DropZoneCenter from '../../../Dropzone/Center/DropZoneCenter';\nimport { set_dragged_to_different_viewport } from '../../state/browser-actions';\nimport { addNewView } from '../../state/dispatchers';\nimport { TupleContextT } from '../../TupleTypes';\nimport { validateDraggable } from '../../../Draggable';\n\ninterface Props {}\n\n\nconst DefaultView = ({}: Props) => {\n    const {\n        dispatch,\n        state: { styles, classes, viewportId }\n    }: TupleContextT = useContext(TupleContext);\n\n    const dropHandler = (e: DragEvent<Element>) => {\n        const dragPageId = e.dataTransfer && e.dataTransfer.getData('pageId');\n\n        const dragViewportId = e.dataTransfer && e.dataTransfer.getData('viewportId');\n\n        if (dragViewportId !== viewportId) {\n            set_dragged_to_different_viewport(true);\n        }\n\n        addNewView(dispatch, dragPageId);\n    }\n\n    return (\n        <DropZoneCenter\n            style={styles.dropZoneCenter}\n            className={classes.dropZoneCenter}\n            onDropCB={dropHandler}\n            validateDraggable={validateDraggable}>\n                <div style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                }}>\n                    Welcome to Tuple!\n                </div>\n        </DropZoneCenter>\n    );\n}\n\n\nexport default DefaultView;","import { ReactNode, useContext } from 'react';\n\nimport { TupleContext } from '..';\nimport { TupleContextT } from '../TupleTypes';\nimport Port from './Port';\nimport DefaultView from './View/DefaultView';\n\nimport _classes from './viewport.module.css';\n\n\nexport interface Props {\n    // noDuplicates: boolean // TODO: Specify whether duplicates are allowed in viewport\n}\n\n\nconst Viewport = () => {\n    const { state: {\n        viewport,\n        styles,\n        classes,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const viewportClassName = `\n        ${_classes?.viewport || ''}\n        ${classes?.viewport  || ''}`;\n\n    // TODO: Custom Default Views?\n    if (!viewport.root) {\n        return <DefaultView />\n    }\n\n    return (\n        <div className={viewportClassName} style={styles.viewport}>\n            <Port id={viewport.root} />\n        </div>\n    );\n};\n\n\nexport default Viewport;","//----------------------------------------------------------------------------------------------------------------------\n// The Tuple component tree that is actually displayed\n//----------------------------------------------------------------------------------------------------------------------\n\nimport { useContext } from 'react';\n\nimport Tree from './Tree/Tree';\nimport Viewport from './Viewport/Viewport';\nimport SplitPane from '../SplitPane';\nimport { TupleContext } from '.';\nimport { TupleContextT } from './TupleTypes';\n\nimport _classes from './tuple.module.css';\nimport { get_viewport_id_from_query_params } from './state/browser-actions';\n\n\ninterface TupleInnerProps {\n    enableTrashcan: boolean,\n}\n\nconst TupleInner = ({ enableTrashcan }: TupleInnerProps) => {\n    const { state: {\n        styles,\n        classes,\n    }}: TupleContextT = useContext(TupleContext);\n\n    const isRootViewport = get_viewport_id_from_query_params() === '';\n\n    const tupleClassName = `\n        ${_classes?.tuple || ''}\n        ${classes?.tuple  || ''}`;\n\n    if (!isRootViewport) {\n        return <Viewport />;\n    }\n\n    return (\n        <div className={tupleClassName} style={styles.tuple}>\n            <SplitPane resizerPos='25%'>\n                <Tree enableTrashcan={enableTrashcan} />\n                <Viewport />\n            </SplitPane>\n        </div>\n    );\n}\n\n\nexport default TupleInner;","import { initialViewport } from \".\";\nimport { getUniqueId } from \"../../../utils\";\nimport { SideT } from \"../../SplitPane/SplitPaneTypes\";\nimport {\n    AddNewViewPayloadT,\n    AddTabPayloadT,\n    AddViewPayloadT,\n    ChangeActiveViewPayloadT,\n    ID,\n    RemoveTabPayloadT,\n    RemoveViewPayloadT,\n    TupleStateT\n} from \"../TupleTypes\";\n\nimport {\n    IdPortPairT,\n    PortsT,\n    ViewportStateT,\n    PortT,\n} from \"../Viewport/ViewportTypes\";\n\n\nconst _log_action = (label: string, state: any, payload: any) => {\n    console.log(`----- ${label} -----`);\n    console.log('state', state);\n    console.log('payload', payload);\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// Viewport State actions\n//---------------------------------------------------------------------------------------------------------------------\nexport const _get_port_copy = (ports: PortsT, id: ID): PortT => {\n    const port = { ...ports[id] };\n    return port || null;\n}\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const _get_sister_details = (viewportState: ViewportStateT, id: ID): IdPortPairT | null => {\n    const port: PortT = viewportState.ports[id];\n    if (!port) return null;\n\n    const isRoot: boolean = port.parentId == null;\n    if (isRoot) return null;\n\n    const parent: PortT = viewportState.ports[port.parentId as ID];\n    if (!parent) return null;\n\n    const sisterId: ID = port.isHead ? parent.tailId as ID : parent.headId as ID;\n    const sister = _get_port_copy(viewportState.ports, sisterId);\n\n    return {\n        id: sisterId,\n        port: sister,\n    } as IdPortPairT;\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const _add_tab = (state: TupleStateT, payload: AddTabPayloadT): TupleStateT => {\n    _log_action('Add Tab', state, payload);\n\n    if (payload.portId === payload.dragPortId) {\n        const newPorts = {\n            ...state.viewport.ports,\n            [payload.portId]: {\n                ...state.viewport.ports[payload.portId],\n                activePageId: payload.pageId,\n            }\n        }\n        return {\n            ...state,\n            viewport: {\n                ...state.viewport,\n                skipTabRemoval: true,\n                ports: newPorts,\n            }\n        };\n    }\n\n    const port = _get_port_copy(state.viewport.ports, payload.portId);\n\n    const pageIds = port.pageIds;\n    if (!pageIds) throw Error('Page ids is null. Was this action called on a Splitview port?');\n    if (pageIds.includes(payload.pageId)) {\n        const newPorts: PortsT = {\n            ...state.viewport.ports,\n            [payload.portId]: {\n                ...port,\n                activePageId: payload.pageId,\n            }\n        };\n\n        return {\n            ...state,\n            viewport: {\n                ...state.viewport,\n                ports: newPorts\n            }\n        }\n    }\n\n    const newPageIds = [\n        ...pageIds?.slice(0, payload.index),\n        payload.pageId,\n        ...pageIds?.slice(payload.index),\n    ];\n\n    const newPorts = {\n        ...state.viewport.ports,\n        [`${payload.portId}`]: {\n            ...port,\n            activePageId: payload.pageId,\n            pageIds: newPageIds,\n        }\n    }\n\n    return {\n        ...state,\n        viewport: {\n            ...state.viewport,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n}\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const _remove_tab = (state: TupleStateT, payload: RemoveTabPayloadT): TupleStateT => {\n    _log_action('Remove Tab', state, payload);\n\n    if (state.viewport.skipTabRemoval) {\n        return {\n            ...state,\n            viewport: {\n                ...state.viewport,\n                skipTabRemoval: false\n            }\n        };\n    }\n\n    const port = _get_port_copy(state.viewport.ports, payload.portId);\n\n    const pageIds = port.pageIds;\n    if (!pageIds) throw Error('Page ids is null. Was this action called on a Splitview port?');\n\n    const newPageIds = pageIds.filter((_, i) => i !== payload.index);\n\n    const newActivePageId = pageIds[payload.index] != port.activePageId\n        ? port.activePageId\n        : pageIds[payload.index+1] || pageIds[payload.index-1];\n    \n    const newPorts = {\n        ...state.viewport.ports,\n        [`${payload.portId}`]: {\n            ...port,\n            pageIds: newPageIds,\n            activePageId: newActivePageId,\n        }\n    }\n\n    return {\n        ...state,\n        viewport: {\n            ...state.viewport,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\n// Add single view to empty viewport\nexport const _add_new_view = (state: TupleStateT, payload: AddNewViewPayloadT): TupleStateT => {\n    if (Object.keys(state.viewport.ports).length !== 0) {\n        throw Error('_add_new_view() should only be called on an empty viewport. Otherwise call _add_view()');\n    }\n\n    const newPortId = getUniqueId();\n    const newPorts = {\n        [`${newPortId}`]: {\n            parentId: null,\n            isSplitView: false,\n            pageIds: [payload.pageId],\n            activePageId: payload.pageId,\n            direction: null,\n            headId: null,\n            tailId: null,\n            isHead: null,\n        }\n    };\n\n    return {\n        ...state,\n        viewport: {\n            // ...state.viewport,\n            root: newPortId,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n};\n\n//---------------------------------------------------------------------------------------------------------------------\n// Create a new splitview port with children as original port and new tab\n/*\n    Will turn:\n            (Parent)\n               |\n            (Port)\n\n    Into:\n             (Parent)\n                |\n            (New Port)\n              /    \\\n         (Port)    (New Child)\n*/\nexport const _add_view = (state: TupleStateT, payload: AddViewPayloadT): TupleStateT => {\n    _log_action('Add View', state, payload);\n\n    const newPortId = getUniqueId();\n    const newChildId = getUniqueId();\n\n    const port = _get_port_copy(state.viewport.ports, payload.portId);\n    const isRoot = !port.parentId;\n\n    // If dropped on same port the drag started from, remove the original pageId to avoid duplicates\n    if (payload.dragPortId === payload.portId) {\n        port.pageIds = port.pageIds?.filter(item => item !== payload.pageId) as ID[];\n    }\n\n    const newChild: PortT = {\n        parentId: newPortId,\n        isSplitView: false,\n        pageIds: [payload.pageId],\n        activePageId: payload.pageId,\n        direction: null,\n        headId: null,\n        tailId: null,\n        isHead: payload.side === SideT.HEAD,\n    };\n\n    const newPort = {\n        parentId: port.parentId,\n        isSplitView: true,\n        pageIds: null,\n        activePageId: null,\n        direction: payload.direction,\n        headId: payload.side === SideT.HEAD ? newChildId : payload.portId,\n        tailId: payload.side === SideT.TAIL ? newChildId : payload.portId,\n        isHead: port.isHead,\n    }\n\n    const newPorts = {\n        ...state.viewport.ports,\n        [`${newPortId}`]: newPort,      // parent\n        [`${newChildId}`]: newChild,    // child\n    }\n\n    // If not the root, handle changes to parent\n    if (!isRoot) {\n        const parent = _get_port_copy(state.viewport.ports, port.parentId as ID);\n        if (port.isHead)\n            parent.headId = newPortId;\n\n        if (port.isHead !== null && !port.isHead)\n            parent.tailId = newPortId;\n\n        newPorts[port.parentId as ID] = parent;  // grandparent\n    }\n\n    // Add back updated port\n    port.parentId = newPortId;\n    port.isHead = payload.side === SideT.TAIL;\n    port.activePageId = port.activePageId === payload.pageId\n        ? port.pageIds && port.pageIds[0]\n        : port.activePageId;\n\n    newPorts[payload.portId] = port;\n    \n    return {\n        ...state,\n        viewport: {\n            // ...state.viewport,\n            root: isRoot ? newPortId : state.viewport.root,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n}\n\n//---------------------------------------------------------------------------------------------------------------------\n// Remove => Replace parent with sister component\nexport const _remove_view = (state: TupleStateT, payload: RemoveViewPayloadT): TupleStateT => {\n    _log_action('Remove View', state, payload);\n\n    // React's Strict mode will cause duplicate renders, which\n    // will cause this action to be called twice. This check\n    // returns the correct state on the second call.\n    const portKeys = Object.keys(state.viewport.ports)\n    if (!portKeys.includes(payload.portId.toString())) {\n        return state;\n    }\n\n    let rootId: ID = state.viewport.root;\n    let port = _get_port_copy(state.viewport.ports, payload.portId);\n    const isRoot = !port.parentId;\n\n    if (isRoot) {\n        return {\n            ...state,\n            viewport: initialViewport,\n        }\n    }\n\n    const parent = _get_port_copy(state.viewport.ports, port.parentId as ID);\n    const parentIsRoot = !parent.parentId;\n    const sister = _get_sister_details(state.viewport, payload.portId);\n\n    const newPorts: PortsT = { ...state.viewport.ports };\n\n    if (parentIsRoot) {\n        if (sister) {\n            rootId = sister.id;\n\n            sister.port.parentId = null;\n            sister.port.isHead = null;\n            newPorts[sister.id] = sister.port;\n        }\n    } else {\n        const grandparentId: ID = parent.parentId as ID;\n        const grandparent  = _get_port_copy(state.viewport.ports, grandparentId);\n\n        if (parent.isHead) {\n            grandparent.headId = sister?.id as ID;\n        } else {\n            grandparent.tailId = sister?.id as ID;\n        }\n\n        if (sister) {\n            sister.port.parentId = grandparentId as ID;\n            sister.port.isHead = parent.isHead;\n\n            newPorts[sister.id] = sister.port;\n        }\n\n        newPorts[grandparentId] = grandparent;\n    }\n\n    delete newPorts[payload.portId];\n    delete newPorts[port.parentId as ID];\n\n    return {\n        ...state,\n        viewport: {\n            //...state.viewport\n            root: rootId,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n}\n\n\n//---------------------------------------------------------------------------------------------------------------------\nexport const _change_active_view = (state: TupleStateT, payload: ChangeActiveViewPayloadT): TupleStateT => {\n    _log_action('Change Active View', state, payload);\n\n    const port = _get_port_copy(state.viewport.ports, payload.portId);\n\n    const newPorts = {\n        ...state.viewport.ports,\n        [`${payload.portId}`]: {\n            ...port,\n            activePageId: payload.pageId,\n        }\n    };\n\n    const newState = {\n        ...state,\n        viewport: {\n            ...state.viewport,\n            ports: newPorts,\n        }\n    } as TupleStateT;\n\n    return newState; \n}\n","import { DragEvent } from \"react\";\nimport { ROOT_PORT_ID } from \"..\";\n\nimport {\n    AddNewViewPayloadT,\n    AddTabPayloadT,\n    AddViewPayloadT,\n    ChangeActiveViewPayloadT,\n    RemoveTabPayloadT,\n    RemoveViewPayloadT,\n    TupleActionKind,\n    TupleActionT,\n    TupleStateT\n} from \"../TupleTypes\";\n\nimport { ViewportStateT } from \"../Viewport/ViewportTypes\";\nimport {\n    _add_new_view,\n    _add_tab,\n    _add_view,\n    _change_active_view,\n    _remove_tab,\n    _remove_view,\n} from \"./actions\";\nimport { get_viewport_id_from_query_params, set_storage_port } from \"./browser-actions\";\n\n\nexport const initialViewport: ViewportStateT = { root: '', ports: {}, skipTabRemoval: false }\n\n\nconst _with_storage_update = (state: TupleStateT) => {\n    const portId = get_viewport_id_from_query_params() || ROOT_PORT_ID;\n    const { ports, root } = state?.viewport;\n    set_storage_port(portId, ports, root, true);\n\n    return state;\n}\n\n\nexport const reducer = (state: TupleStateT, action: TupleActionT): TupleStateT => {\n    switch(action.type) {\n        case TupleActionKind.ADD_TAB:\n            return _with_storage_update(_add_tab(state, action.payload as AddTabPayloadT));\n        case TupleActionKind.REMOVE_TAB:\n            return _with_storage_update(_remove_tab(state, action.payload as RemoveTabPayloadT));\n        case TupleActionKind.ADD_NEW_VIEW:\n            return _with_storage_update(_add_new_view(state, action.payload as AddNewViewPayloadT));\n        case TupleActionKind.ADD_VIEW:\n            return _with_storage_update(_add_view(state, action.payload as AddViewPayloadT));\n        case TupleActionKind.REMOVE_VIEW:\n            return _with_storage_update(_remove_view(state, action.payload as RemoveViewPayloadT));\n        case TupleActionKind.CHANGE_ACTIVE_VIEW:\n            return _with_storage_update(_change_active_view(state, action.payload as ChangeActiveViewPayloadT));\n        default:\n            return state;\n    }\n}\n","import { DirectionT } from \"../../SplitPane/SplitPaneTypes\";\nimport { ID } from \"../TupleTypes\";\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// Data Types\n//----------------------------------------------------------------------------------------------------------------------\nexport interface ViewT {\n    pageIds: ID[],\n    activePageId: ID\n}\n\nexport interface SplitViewT {\n    head: ViewT | SplitViewT,\n    tail: ViewT | SplitViewT | null,\n    direction: DirectionT,\n}\n\nexport type ViewportT = SplitViewT | ViewT;\n\nexport const isViewT = (v: any) => (v as ViewT).pageIds !== undefined;\nexport const isSplitViewT = (v: any) => (v as SplitViewT).head !== undefined;\n\nexport interface PortT {\n    parentId: ID | null,  // null if root\n    isSplitView: boolean,\n    pageIds: ID[] | null,\n    activePageId: ID | null,\n    direction: DirectionT | null,\n    headId: ID | null,\n    tailId: ID | null,\n    isHead: boolean | null,  // null if root\n};\n\n// One element of type ID, which is root - used to identify root id\nexport type PortsT = { [key: ID]: PortT };\n\nexport interface ViewportStateT {\n    root: ID,\n    ports: PortsT,\n    skipTabRemoval: boolean,  // Not graceful, but necessart because dataTransfer object not available onDragEnd\n};\n\nexport interface IdPortPairT {\n    id: ID,\n    port: PortT,\n};\n","//----------------------------------------------------------------------------------------------------------------------\n// Both the entry point to Tuple, but also a context 'Provider' component\n//----------------------------------------------------------------------------------------------------------------------\nimport {\n    createContext,\n    useMemo,\n    useReducer,\n} from 'react';\nimport { getUniqueId, isObject } from '../../utils';\nimport { TreeT } from './Tree/TreeTypes';\nimport TupleInner from './TupleInner';\nimport { initialViewport, reducer } from './state';\n\nimport {\n    EventsT,\n    ID,\n    PagesT,\n    PortMapT,\n    StoragePort,\n    TupleClassesT,\n    TupleContextT,\n    TupleStateT,\n    TupleStylesT\n} from './TupleTypes';\n\nimport {\n    isSplitViewT,\n    isViewT,\n    PortsT,\n    ViewportStateT,\n    PortT,\n    SplitViewT,\n    ViewportT,\n    ViewT,\n} from './Viewport/ViewportTypes';\n\nimport {\n    get_storage_port,\n    get_storage_ports,\n    get_viewport_id_from_query_params,\n    set_storage_port,\n    set_storage_port_open,\n} from './state/browser-actions';\n\nexport const ROOT_PORT_ID = 'root';\n\nexport const TupleContext = createContext({\n    // dispatch: null,  TODO: do I need to initialize dispatch\n    state: {\n        pages: {},\n        viewport: initialViewport,\n        viewportId: '',\n        tree: {},\n        styles: {},\n        classes: {},\n        events: {},\n    }\n} as TupleContextT);\n\n\nexport interface TupleProps {\n    pages: PagesT,\n    tree: TreeT,\n\n    views?: ViewportT,\n    styles?: TupleStylesT,\n    classes?: TupleClassesT,\n    events?: EventsT,\n\n    enableTrashcan?: boolean,\n};\n\n// TODO: Check that every pageId in the tree is in the pages object\n// The user should be able to disbale the check as it may be expensive\nconst validateProps = ({\n    pages,\n    tree,\n    views\n} : TupleProps) => {\n    if (!isObject(pages))\n        throw Error('\"pages\" props should be of the form, PagesT.');\n\n    if (!Array.isArray(tree))\n        throw Error('\"tree\" prop must be an array.');\n\n    if (views && !(isViewT(views) || isSplitViewT(views)))\n        throw Error('\"views\" props should be of type - ViewT or SplitViewT.');\n}\n\n\nconst Tuple = ({\n    pages,\n    views,\n    tree,\n    styles,\n    classes,\n    events,\n    enableTrashcan=false,\n}: TupleProps) => {\n    validateProps({ pages, views, tree });\n\n    const viewportId = get_viewport_id_from_query_params();\n\n    window.addEventListener(\"beforeunload\", () => {\n        set_storage_port_open(viewportId || 'root', false);\n    }, false);\n\n    //------------------------------------------------------------------------------------------------------------------\n    const buildPortMapHelper = (\n        viewport: ViewportT,\n        portMap: PortsT,\n        parentId: ID | null = null,\n        isHead: boolean | null = null\n    ): ID => {\n        const id = getUniqueId();\n\n        if (isViewT(viewport)) {\n            const view = viewport as ViewT;\n            portMap[id] = {\n                parentId,\n                isSplitView: false,\n                pageIds: view.pageIds,\n                activePageId: view.activePageId,\n                direction: null,\n                headId: null,\n                tailId: null,\n                isHead,\n            } as PortT;\n        } else if (isSplitViewT(viewport)) {\n            const splitview = viewport as SplitViewT;\n            portMap[id] = {\n                parentId,\n                isSplitView: true,\n                pageIds: null,\n                activePageId: null,\n                direction: splitview.direction,\n                headId: buildPortMapHelper(splitview.head, portMap, id, true),\n                tailId: buildPortMapHelper(splitview.tail as ViewportT, portMap, id, false),\n                isHead,\n            } as PortT;\n        } else {\n            throw new Error('All viewport values must be of type ViewT or SplitViewT');\n        }\n\n        return id;\n    };\n\n    const buildPortMap = (viewport: ViewportT): PortMapT => {\n        const ports: PortsT = {};\n        const rootId = useMemo(() => buildPortMapHelper(viewport, ports), []);\n\n        return { ports, rootId };\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    const getPortMap = (): PortMapT | null => {\n        const emptyPortMap: PortMapT = { ports: {}, rootId: '' };\n\n        // Query Paramater\n        if (viewportId) {\n            const urlParamPorts: StoragePort = get_storage_port(viewportId);\n            if (urlParamPorts?.ports && urlParamPorts?.rootId) {\n                set_storage_port_open(viewportId);\n                const { ports, rootId } = urlParamPorts;\n                return { ports, rootId };\n            }\n\n            // TODO: Add ID to storage?\n            return emptyPortMap;  // ID found in URL Query paramaters, but not in storage\n        }\n\n        // Storage\n        const storagePorts = get_storage_ports();\n        if (storagePorts) {\n            if (storagePorts[ROOT_PORT_ID]) {\n                set_storage_port_open(ROOT_PORT_ID);\n                const { ports, rootId } = storagePorts[ROOT_PORT_ID];\n                return { ports, rootId };\n            }\n        }\n\n        // Props\n        if (views) {\n            const { ports, rootId } = buildPortMap(views);\n            set_storage_port(ROOT_PORT_ID, ports, rootId, true);\n            return { ports, rootId };\n        }\n\n        // No ports found. Create new root\n        set_storage_port(ROOT_PORT_ID, {}, null, true);\n        return emptyPortMap;\n    };\n\n    //------------------------------------------------------------------------------------------------------------------\n    const { ports, rootId } = getPortMap();\n    const initViewportState: ViewportStateT = { ...initialViewport, root: rootId, ports };\n\n    const initState: TupleStateT = {\n        pages,\n        viewport: initViewportState,\n        viewportId,\n        tree,\n        styles: styles || {},\n        classes: classes || {},\n        events: events || {},\n    };\n\n\n    const [state, dispatch] = useReducer(reducer, initState);\n    const context = useMemo(() => (\n        { state, dispatch }\n    ), [state, dispatch]);\n\n    return (\n        <TupleContext.Provider value={context}>\n            <TupleInner enableTrashcan={enableTrashcan} />\n        </TupleContext.Provider>\n    );\n}\n\n\nexport default Tuple;\n","import { memo, PropsWithChildren } from 'react';\n\nconst Page = (props: PropsWithChildren) => {\n    return (\n        <div {...props}>\n            {props.children}\n        </div>\n    );\n}\n\n\nexport default memo(Page);"],"names":["getUniqueId","getRandomWord","words","max","min","index","isObject","obj","this","useEventCallback","fn","ref","useRef","useIsomorphicLayoutEffect","useCallback","args","useEventListener","eventName","handler","element","options","savedHandler","useEffect","_a","targetElement","listener","event","useLayoutEffect","useLocalStorage","key","initialValue","readValue","item","parseJSON","error","storedValue","setStoredValue","useState","setValue","value","newValue","handleStorageChange","DRAG_ID","setCustomDragImage","text","className","style","elem","_classes","prop","cleanupDraggable","draggable","validateDraggable","outsideWindow","x","y","STORAGE_ID","DRAGGED_TO_DIFF_VP_ID","VIEWPORT_QUERY_ID","DRAGGING_ID","get_storage_ports","storagePorts","get_storage_port","id","storage","set_storage_port","portId","ports","rootId","open","remove_storage_port_key","rename_storage_port_key","oldKey","newKey","set_storage_port_from_page_id","pageId","viewportId","newPort","newPorts","set_storage_port_open","open_new_viewport_window","url","get_viewport_id_from_query_params","get_dragged_to_different_viewport","timeout","ret","draggedToDifferentViewport","set_dragged_to_different_viewport","resolve","reject","SideT","TupleActionKind","addTab","dispatch","dragPortId","dragPageId","addTabAction","removeTab","removeTabAction","addNewView","addNewViewPayload","addNewViewAction","addView","side","addViewPayload","DropSideT","addViewAction","removeView","removeViewAction","changeView","changeActiveViewAction","Leaf","pages","viewport","classes","styles","events","useContext","TupleContext","_","setDragging","leafClassName","draggableClass","getTopLeftPortIdHelper","curPortId","currentPort","getTopLeftPortId","root","dragStartHandler","e","dragEndHandler","newViewportId","dragOverHandler","dropHandler","draggableName","source","onClickHandler","topLeftPortId","_jsx","leaf","Branch","children","branchClassName","branchesClassName","branchesStyle","path","expanded","setExpanded","_branchClassName","_global_classes","noHighlight","_jsxs","branchStyle","Children","clickHandler","Rootlet","openSymbol","hoverSymbol","_text","setText","hoveringSymbol","setHoveringSymbol","textboxRef","displaySymbol","closeSymbol","rootletClassName","symbolContainerClassName","symbolContainer","rootletTextBoxClassName","rootletTextBox","mouseEnterHandler","mouseLeaveHandler","doubleClickHandler","textDoubleClickHandler","textChangeHandler","newText","rootlet","Root","rootName","rootClassName","rootletsClassName","rootlets","rootlets2","Taproot","r","isLeaf","node","Trashcan","symbol","dragOverSymbol","draggingOver","setDraggingOver","visible","setVisible","trashcanClassName","dragLeaveHandler","trashcan","Branches","page","name","branch","console","label","branches","_node","Tree","enableTrashcan","treeRef","rootContainerRef","tree","scrollPaneHeight","setScrollPaneHeight","treeHeight","rootHeight","treeClassName","scrollPaneClassName","scrollPaneStyle","scrollPane","ScrollPane","Tab","tabRef","closeVisible","setCloseVisible","port","isActiveTab","inactiveTabClassName","activeTabClassName","tabClassName","tabLabelClassName","tabCloseClassName","tabStyle","tab","tabActive","rootCSS","tabbarHeight","removeTabHandler","onCloseClickHandler","tabLabel","tabCloseContainer","tabClose","TabBar","tabBarClassName","noScrollbar","tabBar","i","pid","View","pageIds","ActivePage","activePageId","viewClassName","contentContainer","dropSideHandler","dragViewportId","dropCenterHandler","view","DropZone","pane","dropZoneCenter","dropZoneSide","props","Port","head","headId","tail","tailId","SplitPane","direction","DefaultView","DropZoneCenter","Viewport","state","viewportClassName","TupleInner","isRootViewport","tupleClassName","tuple","_log_action","payload","_get_port_copy","_get_sister_details","viewportState","parent","sisterId","sister","_add_tab","newPageIds","_remove_tab","newActivePageId","_add_new_view","newPortId","_add_view","newChildId","isRoot","newChild","_remove_view","initialViewport","parentIsRoot","grandparentId","grandparent","_change_active_view","_with_storage_update","ROOT_PORT_ID","reducer","action","isViewT","v","isSplitViewT","createContext","validateProps","views","Tuple","window","buildPortMapHelper","portMap","parentId","isHead","splitview","buildPortMap","ports2","rootId2","useMemo","getPortMap","emptyPortMap","urlParamPorts","initViewportState","initState","useReducer","context","Tuple$1","Page","Page$1","memo"],"mappings":"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"}