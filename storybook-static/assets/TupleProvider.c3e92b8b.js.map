{"version":3,"file":"TupleProvider.c3e92b8b.js","sources":["../../src/types.ts","../../src/components/Tuple/TupleState.tsx","../../src/components/Tuple/TupleProvider.tsx"],"sourcesContent":["import { CSSProperties, Dispatch, MouseEvent as rMouseEvent } from 'react';\n\n//----------------------------------------------------------------------------------------------------------------------\n// Types\n//----------------------------------------------------------------------------------------------------------------------\nexport type DragEvent = (e: MouseEvent | rMouseEvent, page: PageT) => void;  // TODO: Remove if unused\nexport type ID = number | string;\nexport type DirectionT = 'horizontal' | 'vertical' | 'none';\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// Interfaces\n//----------------------------------------------------------------------------------------------------------------------\nexport interface PositionT {  // todo should this be PositionI?\n    x: number,\n    y: number,\n}\n\nexport interface MinMaxT {\n    min: number,\n    max: number,\n}\n\n//----------------------------------------------------------------------\nexport type ComponentRendererT = (props: any) => JSX.Element;  // TODO: Will I need this for Leaf component?\nexport interface PageT {\n    name: string,\n    // TODO: Better typing thany any? Probz not tbh...\n    component: ComponentRendererT,\n    props?: object,\n}\nexport type PagesT = { [key: ID]: PageT }\n//----------------------------------------------------------------------\nexport interface BranchT {\n    label: string,\n    branches: (ID | BranchT)[],\n}\nexport type TreeT = (ID | BranchT)[];\n//----------------------------------------------------------------------\n\nexport interface ViewT {\n    id: ID,\n    path: string,\n    pageIds: ID[],\n    activePageId: ID\n}\n\nexport interface SplitViewT {\n    head: ViewT | SplitViewT,\n    tail: ViewT | SplitViewT | null,\n    direction: DirectionT,\n}\n\nexport type ViewportT = SplitViewT | ViewT | null;\n\n//----------------------------------------------------------------------------------------------------------------------\n// Type Checkers\n//----------------------------------------------------------------------------------------------------------------------\nexport const isViewT = (v: any) => (v as ViewT).pageIds !== undefined;\nexport const isSplitViewT = (v: any) => (v as SplitViewT).head !== undefined;\n// [DEPR] const isReactComponent = (comp: any) => !!comp?.prototype?.isReactComponent || isValidElement(comp);\nexport const isID = (id: any) => typeof(id) === 'string' || typeof(id) === 'number';\n\n\n//----------------------------------------------------------------------------------------------------------------------\n// Tuple Context\n//----------------------------------------------------------------------------------------------------------------------\nexport enum ViewActionKind {\n    VIEW_ADD_TAB = \"VIEW_ADD_TAB\",\n    VIEW_REMOVE_TAB = \"VIEW_REMOVE_TAB\",\n    VIEW_ADD_VIEW = \"VIEW_ADD_VIEW\",\n    VIEW_REMOVE_VIEW = \"VIEW_REMOVE_VIEW\",\n    TREE_ADD_TAB = \"TREE_ADD_TAB\",\n    TREE_ADD_VIEW = \"TREE_ADD_VIEW\",\n}\n\n\nexport interface ViewActionT {\n    type: ViewActionKind,\n    payload: object,  // TODO: Less generic type?\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n\n// Should always have same fields as TupleClassesT\nexport interface TupleStylesT {\n    tuple?: CSSProperties,\n    // TODO : draggable style?\n    draggable?: CSSProperties,\n    splitpane?: CSSProperties,\n\n    tree?: CSSProperties,\n    branch?: CSSProperties,\n    branches?: CSSProperties,\n    leafContainer?: CSSProperties,\n    leaf?: CSSProperties,\n\n    tabBar?: CSSProperties,\n    tab?: CSSProperties,\n    tabLabel?: CSSProperties,\n    tabClose?: CSSProperties,\n\n    viewport?: CSSProperties,\n    port?: CSSProperties, // TODO : Do I need this?\n    view?: CSSProperties,\n}\n\n\nexport interface TupleClassesT {\n    tuple?: string,\n    draggable?: string,\n    splitpane?: string,\n\n    tree?: string,\n    branch?: string,\n    branches?: string,\n    leafContainer?: string,\n    leaf?: string,\n\n    tabBar?: string,\n    tab?: string,\n    tabLabel?: string,\n    tabClose?: string,\n\n    viewport?: string,\n    port?: string, // TODO : Do I need this?\n    view?: string,\n}\n\n\nexport interface EventsT {}\n\n\nexport interface TupleContextT {\n    pages: PagesT,\n    views: ViewportT,\n    dipatchViewAction: Dispatch<ViewActionT>\n    styles: TupleStylesT,\n    classes: TupleClassesT,\n    events: EventsT,\n}\n","import { useReducer } from 'react';\nimport {\n    SplitViewT,\n    ViewportT,\n    ViewT,\n    ViewActionKind,\n    ViewActionT,\n} from '../../types';\n\n\nexport const getViewsFromStorage = (): ViewportT => {\n    const storageViews = localStorage.getItem(\"views\");\n    if (storageViews)\n        return JSON.parse(storageViews) as SplitViewT | ViewT;\n\n    return null\n};\n\n// Helpers\nconst addAtPosition = (arr: any[], pos: number, item: any) => {\n    arr.splice(pos, 0, item);\n    return arr;\n}\n\n\nconst removeFirstInstanceOf = (arr: any[], item: any) => {\n    arr.splice(arr.indexOf(item), 1);\n    return arr;\n}\n\n// Tree Events\n// TODO : Working here... Just got payload... Now add tab... save to local storage as well...\n// UPDATE : Great SUCCESS. Tabs moving... still lots to do though..\nconst _tree_add_tab = (state: ViewportT, payload: any): ViewportT => {\n    console.log('_t_add_tab state', state);\n    console.log('_t_add_tab payload', payload);\n    // if (state === null)\n\n    let stateRef = state;\n    for(let c of payload.path) {\n        if (c !== 'h' && c!== 't') throw 'Bad path!';\n        stateRef = c === 'h' ? stateRef.head : stateRef.tail;\n    }\n    stateRef.pageIds.push(payload.pid);\n\n    return {...state} as ViewportT;\n}\n\n\n// View Events\nconst _view_add_tab = (state: ViewportT, payload: object): ViewportT => {\n    console.log('_v_add_tab state', state);\n    console.log('_v_add_tab payload', payload);\n    // if (state === null)\n    return state;\n}\n\n\nexport const viewReducer = (state: ViewportT, action: ViewActionT): ViewportT => {\n    switch(action.type) {\n        case ViewActionKind.VIEW_ADD_TAB: return _view_add_tab(state, action.payload);\n        case ViewActionKind.VIEW_REMOVE_TAB: break;\n        case ViewActionKind.VIEW_ADD_VIEW: break;\n        case ViewActionKind.VIEW_REMOVE_VIEW: break;\n        case ViewActionKind.TREE_ADD_TAB: return _tree_add_tab(state, action.payload);\n        default:\n            return state;\n    }\n    return null;\n}\n","import {\n    createContext,\n    Children,\n    ReactNode,\n    useReducer,\n    Dispatch\n} from 'react';\n\n\nimport {\n    EventsT,\n    PagesT,\n    SplitViewT,\n    TupleClassesT,\n    TupleContextT,\n    TupleStylesT,\n    ViewportT\n} from '../../types';\nimport { getViewsFromStorage, viewReducer } from './TupleState';\n\n\n// On second thought, this should live in Tuple...\nexport const TupleContext = createContext({\n    pages: {},\n    views: null,  // initial views.. Will overwrite with localStorage first\n    dipatchViewAction: ()=>{},\n    styles: {},\n    classes: {},\n    events: {},\n} as TupleContextT);\n\n\ninterface TupleProviderProps {\n    pages: PagesT,\n    views: ViewportT,\n\n    styles?: TupleStylesT,\n    classes?: TupleClassesT,\n    events?: EventsT,\n    \n    children: ReactNode,\n};\n\n\nconst TupleProvider = ({\n    pages,\n    styles,\n    classes,\n    events,\n    views,\n    children,\n}: TupleProviderProps) => {\n    const childrenArr = Children.toArray(children);\n    if (childrenArr.length != 1) throw 'TupleProvider takes only one child: a Tuple component';\n    // TODO : Check type of Child. Make sure it is Tuple\n\n    const initViews = getViewsFromStorage() || views || null;\n    const [tupleViews, dipatchV] = useReducer(viewReducer, initViews);\n\n    const context = {\n        pages,\n        views: tupleViews,\n        dipatchViewAction: dipatchV,\n        styles: styles || {},\n        classes: classes || {},\n        events: events || {},\n    };\n\n\n    return (\n        <TupleContext.Provider value={context}>\n            { children }\n        </TupleContext.Provider>\n    );\n}\n\n\nexport default TupleProvider;"],"names":["getViewsFromStorage","storageViews","localStorage","getItem","JSON","parse","_tree_add_tab","state","payload","log","stateRef","c","path","head","tail","pageIds","push","pid","_view_add_tab","viewReducer","action","type","ViewActionKind","VIEW_ADD_TAB","VIEW_REMOVE_TAB","VIEW_ADD_VIEW","VIEW_REMOVE_VIEW","TREE_ADD_TAB","createContext","pages","styles","classes","events","views","children","Children","useReducer","tupleViews","dipatchV","_jsx","context"],"mappings":"sFA0DO,KAAM,GAAU,AAAC,GAAY,EAAY,UAAY,OAC/C,EAAe,AAAC,GAAY,EAAiB,OAAS,OAEtD,EAAO,AAAC,GAAY,MAAO,IAAQ,UAAY,MAAO,IAAQ,SAM/D,GAAA,IAAA,GACO,GAAA,aAAA,eACG,EAAA,gBAAA,kBACF,EAAA,cAAA,gBACG,EAAA,iBAAA,mBACJ,EAAA,aAAA,eACC,EAAA,cAAA,gBANR,IAAA,GAAA,CAAA,CAAA,ECzDL,KAAMA,GAAsB,IAAiB,CAC1CC,KAAAA,GAAeC,aAAaC,QAAQ,OAArB,EACjBF,MAAAA,GACOG,KAAKC,MAAMJ,CAAX,EAEJ,IACV,EAiBKK,EAAgB,CAACC,EAAkBC,IAA4B,CACzDC,QAAAA,IAAI,mBAAoBF,CAAhC,EACQE,QAAAA,IAAI,qBAAsBD,CAAlC,EAGA,GAAIE,GAAWH,EACPI,OAAAA,KAAKH,GAAQI,KAAM,CACnBD,GAAAA,IAAM,KAAOA,IAAK,IAAW,KAAA,YACjCD,EAAWC,IAAM,IAAMD,EAASG,KAAOH,EAASI,IACnD,CACQC,SAAAA,QAAQC,KAAKR,EAAQS,GAA9B,EAEO,CAAC,GAAGV,CAAAA,CACd,EAIKW,EAAgB,CAACX,EAAkBC,IAC7BC,SAAAA,IAAI,mBAAoBF,CAAhC,EACQE,QAAAA,IAAI,qBAAsBD,CAAlC,EAEOD,GAIEY,EAAc,CAACZ,EAAkBa,IAAmC,CAC7E,OAAOA,EAAOC,UACLC,GAAeC,aAAqBL,MAAAA,GAAcX,EAAOa,EAAOZ,OAAf,MACjDc,GAAeE,gBAAiB,UAChCF,GAAeG,cAAe,UAC9BH,GAAeI,iBAAkB,UACjCJ,GAAeK,aAAqBrB,MAAAA,GAAcC,EAAOa,EAAOZ,OAAf,UAE3CD,MAAAA,GAER,MAAA,KACV,EC/CM,EAAAqB,EAAAA,QAAAA,cAAA,CAAmC,MAAA,CAAA,EAAA,MAAA,KAE/B,kBAAA,IAAA,CACgB,EAAE,OAAA,CAAA,EAHa,QAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA,EAsB1C,EAAA,CAAA,CAAuB,QACnBC,SACAC,UACAC,SACAC,QACAC,cACAC,CAGA,GAAA,AADAC,EAAAA,QAAAA,SAAA,QAAA,CAAA,EACA,QAAA,EAA6B,KAAA,wDAG7B,KAAA,GAAA,KAAA,GAAA,KACA,CAAA,EAAA,GAAAC,EAAAA,QAAAA,WAAA,EAAA,CAAA,EAEA,EAAA,CAAgB,QACZP,MAAAA,EACOQ,kBAAAA,EACYC,OAAAA,GAAAA,CAAAA,EAHP,QAAA,GAAA,CAAA,EAAA,OAAA,GAAA,CAAA,CAMM,EAItB,MAAAC,GAAA,EAAA,SAAA,CACI,MAAA,EAA8BC,UAA9B,CAAA,CAIP"}