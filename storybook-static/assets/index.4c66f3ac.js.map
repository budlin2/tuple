{"version":3,"file":"index.4c66f3ac.js","sources":["../../src/components/Dropzone/index.tsx"],"sourcesContent":["import {\n    CSSProperties,\n    useState,\n    useRef,\n    DragEvent,\n    ReactElement,\n    MouseEvent as rMouseEvent,\n} from 'react';\n\nimport DropZoneCenter from './Center/DropZoneCenter';\nimport { DropSideT } from './DropZoneTypes';\nimport DropZoneSides from './Sides/DropZoneSides';\n\nimport _classes from './DropZone.module.css';\n\nexport interface Props {\n    dropZoneRootStyle?          : CSSProperties\n    centerDropZoneStyle?        : CSSProperties,\n    sidesDropZoneStyle?         : CSSProperties,\n    dropZoneRootClassName?      : string\n    centerDropZoneClassName?    : string,\n    sidesDropZoneClassName?     : string,\n    dropCenterCb?               : ((e: DragEvent<Element>) => void) | null,\n    dropSidesCb?                : ((e: DragEvent<Element>, side: DropSideT) => void) | null,\n    validateDraggable?          : ((e: DragEvent<Element>) => boolean) | null,\n    children?                   : ReactElement,\n}\n\n\nconst DropZone = ({\n    dropZoneRootStyle,\n    centerDropZoneStyle=null,\n    sidesDropZoneStyle=null,\n    dropZoneRootClassName,\n    centerDropZoneClassName=null,\n    sidesDropZoneClassName=null,\n    dropCenterCb=null,\n    dropSidesCb=null,\n    validateDraggable=null,\n    children,\n}: Props) => {\n    const rootRef = useRef<HTMLDivElement>();\n    const [dropZonesActive, setDropZonesActive] = useState(false);\n\n    const rootClassName = `\n        ${_classes.root}\n        ${dropZoneRootClassName}`;\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Event Handlers\n    //------------------------------------------------------------------------------------------------------------------\n    const onDropCenterHandler = (e: DragEvent<Element>) => {\n        setDropZonesActive(false);\n        dropCenterCb && dropCenterCb(e);\n    }\n\n    const onDropSidesHandler = (e: DragEvent<Element>, side: DropSideT) => {\n        setDropZonesActive(false);\n        dropSidesCb && dropSidesCb(e, side);\n    }\n\n    // TODO: Could add event listener to window in this function to setDragZonesActive(false).. then clean up the event listener of course..\n    const onDragOverHandler = () => setDropZonesActive(true);\n\n    const onDragLeaveHandler = (e: rMouseEvent) => {\n        const { top, right, bottom, left } = rootRef.current.getBoundingClientRect();\n        const { clientX: xPos, clientY: yPos } = e;\n\n        // hacky, but been having issue with mouse position not being\n        // correctly recorded when leaving div from right or bottom\n        const OFFSET = 10;\n\n        // This event can fire when dragging over a child element, so need\n        // to check if mouse has actually left the surrounding div\n        if (xPos <= left ||\n            xPos >= right - OFFSET ||\n            yPos <= top ||\n            yPos >= bottom - OFFSET)\n        {\n            setDropZonesActive(false);\n        }\n    }\n\n    return (\n        <div ref={rootRef}\n            className={rootClassName}\n            style={dropZoneRootStyle}\n            onDragOver={onDragOverHandler}\n            onDragLeave={onDragLeaveHandler}>\n\n            <DropZoneCenter\n                style={centerDropZoneStyle}\n                className={centerDropZoneClassName}\n                dropZoneActive={dropZonesActive}\n                onDropCB={onDropCenterHandler}\n                validateDraggable={validateDraggable}>\n\n                <DropZoneSides\n                    style={sidesDropZoneStyle}\n                    className={sidesDropZoneClassName}\n                    dropZoneActive={dropZonesActive}\n                    onDropCB={onDropSidesHandler}\n                    validateDraggable={validateDraggable}>\n\n                    { children }\n\n                </DropZoneSides>\n            </DropZoneCenter>\n        </div>\n    );\n}\n\n\nexport default DropZone;"],"names":["DropZone","dropZoneRootStyle","sidesDropZoneStyle","dropZoneRootClassName","sidesDropZoneClassName","dropCenterCb","dropSidesCb","validateDraggable","children","rootRef","useRef","dropZonesActive","setDropZonesActive","useState","rootClassName","_classes","root","_jsx","onDragOverHandler","top","right","bottom","left","xPos","yPos","OFFSET","onDragLeaveHandler","centerDropZoneStyle","centerDropZoneClassName","onDropCenterHandler","DropZoneSides","side","onDropSidesHandler","DropZone$1"],"mappings":"8NA6BA,MAAAA,EAAA,CAAA,CAAkB,kBAAAC,EACdA,oBAAAA,EAAAA,KACoB,mBAAAC,EAAA,KACD,sBAAAC,EACnBA,wBAAAA,EAAAA,KACwB,uBAAAC,EAAA,KACD,aAAAC,EAAA,KACV,YAAAC,EAAA,KACD,kBAAAC,EAAA,KACM,SAAAC,CAEf,IAAA,CACH,MAAAC,EAAAC,EAAAA,QAAAA,SACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EAEAC,EAAA;AAAA,UAAuBC,EAAA;AAAA,UACRC,IAsCf,OAAAC,EAAA,MAAA,CACI,IAAAR,EAAUA,UAAAA,EACKK,MAAAA,EACJb,WAxBf,IAAAW,EAAA,EAAA,EAyBoBM,YAvBpB,GAAA,CACI,KAAA,CAAM,IAAAC,EAAEA,MAAAA,EAAKC,OAAAA,EAAOC,KAAAA,CAAQC,EAAAA,EAAAA,QAAAA,wBAC5B,CAAM,QAAAC,EAAWA,QAAAA,CAAeC,EAAAA,EAIhCC,EAAA,IAIAF,GAAAD,GAAAC,GAAAH,EAAAK,GAAAD,GAAAL,GAAAK,GAAAH,EAAAI,IAKIb,EAAAA,EAAAA,CACJ,EAQiBc,SAAAA,EAAAA,EAAAA,CAEE,MAAAC,EACJA,UAAAA,EACIC,eAAAA,EACKjB,SA1C5B,GAAA,CACIC,EAAAA,EAAAA,EACAP,GAAAA,EAAAA,CAAAA,CAA8B,EAyCZwB,kBAAAA,EACV,SAAAZ,EAAAa,EAAA,CAEc,MAAA5B,EACHA,UAAAA,EACIE,eAAAA,EACKO,SA5ChC,CAAA,EAAAoB,IAAA,CACInB,EAAAA,EAAAA,EACAN,GAAAA,EAAAA,EAAAA,CAAAA,CAAkC,EA2CZ0B,kBAAAA,EACV,SAAAxB,CAAqC,CAAA,CAE3B,CAAA,CAEE,CAAA,CAIhC,EAGA,IAAAyB,EAAAjC"}