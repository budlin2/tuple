{"version":3,"file":"index.f2a4b9f1.js","sources":["../../src/components/Viewport/Port.tsx","../../src/components/Viewport/index.tsx"],"sourcesContent":["//----------------------------------------------------------------------------------------------------------------------\n// Recursive component tree of Views and SplitPanes that make up a Viewport\n//----------------------------------------------------------------------------------------------------------------------\n\nimport {\n    ViewT,\n    SplitViewT,\n    isViewT,\n    isSplitViewT,\n} from \"../../types\"\nimport SplitPane from \"../SplitPane\";\nimport View from \"./View\";\n\n\n//----------------------------------------------------------------------------------------------------------------------\n\n\nconst validateSplitView = (splitView: SplitViewT) => {\n    if (splitView.direction == 'none') {\n        if (!!splitView.tail) {\n            console.warn('Views with diection \"none\" should have only one child.');\n        }\n    } else {\n        if (!splitView.tail) {\n            throw new Error(`\"${splitView.direction}\" views require two children`);\n        }\n    }\n};\n\n\n//----------------------------------------------------------------------------------------------------------------------\n\n\ninterface PortProps {\n    view: SplitViewT | ViewT,\n    path: string,\n}\n\n\nconst Port = ({\n    view,\n    path,\n}: PortProps): JSX.Element => {\n    if (isViewT(view)) {\n        view = view as ViewT;\n        return (\n            <View\n                id={view.id}\n                pageIds={view.pageIds}\n                activePageId={view.activePageId}\n                path={path as string}\n            />\n        );\n    } else if (isSplitViewT(view)) {\n        view = view as SplitViewT;\n        validateSplitView(view);\n\n        const HEAD_PATH = `${path}h`;\n        const TAIL_PATH = `${path}t`;\n\n        return (\n            <SplitPane\n                dir={view.direction}\n                resizerPos='50%'>\n                {/* TODO: add resizerPos to SplitViewT */}\n                { view.head && <Port view={view.head} path={HEAD_PATH}/> }\n                { view.tail && <Port view={view.tail} path={TAIL_PATH}/> }\n            </SplitPane>\n        );\n    }\n\n    throw Error('Invalid argument. Paramater \"view\" needs to be SplitViewT or ViewT');\n};\n\n\nexport default Port;","import { ReactNode, useContext } from 'react';\n\nimport { SplitViewT, TupleClassesT, TupleStylesT, ViewportT } from '../../types';\nimport { TupleContext } from '../Tuple/TupleProvider';\nimport Port from './Port';\n\nimport _classes from './views.module.css';\n\nexport interface Props {\n    views: ViewportT,\n    defaultView: ReactNode,  // TODO: Also allow ViewT\n}\n\n\nconst Viewport = ({\n    views,\n    defaultView,\n}: Props) => {\n    const {styles, classes}: {\n        styles: TupleStylesT,\n        classes: TupleClassesT,\n    } = useContext(TupleContext);\n\n    const viewportClassName = `${_classes.viewport} ${classes.viewport}`;\n\n    // TODO : Show defaultView\n    if (!views)\n        return (\n            <>No Views. SAD!</>\n        );\n\n    return (\n        <div className={viewportClassName} style={styles.viewport}>\n            <Port view={views as SplitViewT} path='' />\n        </div>\n    );\n};\n\n\nexport default Viewport;"],"names":["console","view","path","_jsx","id","pageIds","activePageId","validateSplitView","_jsxs","direction","head","HEAD_PATH","tail","TAIL_PATH","views","defaultView","styles","classes","viewportClassName","viewport","_Fragment"],"mappings":"8OAiBA,KAAA,GAAA,AAAA,GAAA,CACI,GAAA,EAAA,WAAA,OACI,AAAA,EAAA,MACIA,QAAAA,KAAAA,wDAAAA,UAGJ,CAAA,EAAA,KACI,KAAA,IAAA,OAAA,IAAA,EAAA,uCAAA,CAGX,EAYD,EAAA,CAAA,CAAc,OACVC,UACAC,CAEA,GAAA,EAAA,CAAA,EACID,SAAAA,EACAE,EAAA,EAAA,CACI,GAAA,EAAA,GACaC,QAAAA,EAAAA,QACKC,aAAAA,EAAAA,aACKC,MACnB,CAAA,EALR,GAAA,EAAA,CAAA,EAAA,CASAL,EAAAA,EACAM,EAAAA,CAAAA,EAEA,KAAA,GAAA,GAAA,KACA,EAAA,GAAA,KAEA,MAAAC,GAAA,EAAA,CACI,IAAA,EAAA,UACcC,WAAAA,MACC,SAAA,CAAA,EAAA,MAAAN,EAAA,EAAA,CAEI,KAAA,EAAA,KAAiBO,KAAAA,CAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,CAC7B,KAAA,EAAA,KAAiBC,KAAAA,CAAYC,CAAAA,CAAAA,CALhD,CAAA,CADJ,CAWJ,KAAA,OAAA,oEAAA,CACH,wdC1DD,KAAA,GAAA,CAAA,CAAkB,QACdC,iBACAC,CAEA,KAAA,CAAM,SAACC,WAAQC,EAAAA,QAAAA,WAAAA,CAAAA,EAKf,EAAA,GAAA,EAAA,YAAA,EAAA,WAGA,MAAA,GAKAd,EAAA,MAAA,CACI,UAAA,EAAgBe,MAAAA,EAAAA,SAAiCC,SAAAA,EAAAA,EAAAA,CAC7C,KAAA,EAAYL,KAAAA,EAA0B,CAAA,CAAtC,CAAA,EANJX,EAAAiB,EAAA,CACI,SAAA,gBAAA,CAAA,CAQX,EAGD,GAAA,GAAA"}